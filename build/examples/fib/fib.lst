[00001]                   ; -------------------------------------------------------------------
[00002]                   ; This file generated by ElfC, based on SubC
[00003]                   ; SubC Copyright 2012-2025 by Nils Holm
[00004]                   ; -------------------------------------------------------------------
<00000>                   #include include/ops_c.inc
<00001>                   .op "PUSH","N","9$1 73 8$1 73"
<00002>                   .op "POP","N","60 72 A$1 F0 B$1"
<00003>                   .op "MOV","NR","9$2 B$1 8$2 A$1"
<00004>                   .op "MOV","NW","F8 H2 B$1 F8 L2 A$1"
<00005>                   .op "CALL","W","D4 H1 L1"
<00006>                   .op "RTN","","D5"
<00007>                   .op "CLC","","FC 00"
<00008>                   .op "STC","","FF 00"
<00009>                   .op "COPY","NR","8$1 A$2 9$1 B$2"
<00010>                   .op "LOAD","NW","F8 L2 A$1 F8 H2 B$1"
<00011>                   .op "RETURN","","D5"
<00012>                   .op "MATCH","NW","8$1 FF L2 52 9$1 7F H2 F1"
<00013>                   .op "BRKPT","","79 D1"
<00000>                   #include include/bios.inc
<00001>                   ; *******************************************************************
<00002>                   ; *** This software is copyright 2006 by Michael H Riley          ***
<00003>                   ; *** You have permission to use, modify, copy, and distribute    ***
<00004>                   ; *** this software so long as this copyright notice is retained. ***
<00005>                   ; *** This software may not be used in commercial applications    ***
<00006>                   ; *** without express written permission from the author.         ***
<00007>                   ; *******************************************************************
<00008>                   
<00011>                   #endif
<00012>                   
<00013>                   ; Define address for standard BIOS vectors
<00014>                   #ifndef BIOS
<00015>                   #define BIOS 0ff00h
<00016>                   #endif
<00017>                   
<00018>                   ; Define address for extended BIOS vectors
<00019>                   #ifndef EBIOS
<00020>                   #define EBIOS 0f800h
<00021>                   #endif
<00022>                   
<00023>                   #ifndef _TASM_
<00024> 0000:             scall:      equ  r4                    ; register for SCALL
<00025> 0000:             sret:       equ  r5                    ; register for SRET
<00026>                   
<00027> 0000:             call:       equ  0ffe0h                ; depricated
<00028> 0000:             ret:        equ  0fff1h                ; depricated
<00029>                   #endif
<00030>                   
<00031> 0000:             f_boot:     equ  (BIOS+00h)            ; boot from ide device
<00032> 0000:             f_type:     equ  (BIOS+03h)            ; type 1 character to console
<00033> 0000:             f_read:     equ  (BIOS+06h)            ; read 1 character from console
<00034> 0000:             f_msg:      equ  (BIOS+09h)            ; type asciiz string to console
<00035> 0000:             f_typex:    equ  (BIOS+0ch)            ; depricated, just returns now
<00036> 0000:             f_input:    equ  (BIOS+0fh)            ; read asciiz from console
<00037> 0000:             f_strcmp:   equ  (BIOS+12h)            ; compare 2 strings
<00038> 0000:             f_ltrim:    equ  (BIOS+15h)            ; trim leading spaces
<00039> 0000:             f_strcpy:   equ  (BIOS+18h)            ; copy an asciiz string
<00040> 0000:             f_memcpy:   equ  (BIOS+1bh)            ; copy memory
<00041> 0000:             f_wrtsec:   equ  (BIOS+1eh)            ; write floppy sector (depricated)
<00042> 0000:             f_rdsec:    equ  (BIOS+21h)            ; read floppy sector (depricated)
<00043> 0000:             f_seek0:    equ  (BIOS+24h)            ; floppy seek to track 0 (depricated)
<00044> 0000:             f_seek:     equ  (BIOS+27h)            ; floopy track seek (depricated)
<00045> 0000:             f_drive:    equ  (BIOS+2ah)            ; select floppy drive (depricated)
<00046> 0000:             f_setbd:    equ  (BIOS+2dh)            ; set console baud rate
<00047> 0000:             f_mul16:    equ  (BIOS+30h)            ; 16-bit multiply
<00048> 0000:             f_div16:    equ  (BIOS+33h)            ; 16-bit division
<00049> 0000:             f_idereset: equ  (BIOS+36h)            ; reset ide device
<00050> 0000:             f_idewrite: equ  (BIOS+39h)            ; write ide sector
<00051> 0000:             f_ideread:  equ  (BIOS+3ch)            ; read ide sector
<00052> 0000:             f_initcall: equ  (BIOS+3fh)            ; initialize R4 and R5
<00053> 0000:             f_bootide:  equ  (BIOS+42h)            ; boot from ide device
<00054> 0000:             f_hexin:    equ  (BIOS+45h)            ; convert ascii number to hex
<00055> 0000:             f_hexout2:  equ  (BIOS+48h)            ; convert hex to 2-digit ascii
<00056> 0000:             f_hexout4:  equ  (BIOS+4bh)            ; convert hex to 4-digit ascii
<00057> 0000:             f_tty:      equ  (BIOS+4eh)            ; type character to console
<00058> 0000:             f_mover:    equ  (BIOS+51h)            ; program relocator
<00059> 0000:             f_minimon:  equ  (BIOS+54h)            ; mini monitor
<00060> 0000:             f_freemem:  equ  (BIOS+57h)            ; determine memory size
<00061> 0000:             F_isnum:    equ  (BIOS+5ah)            ; determine if D is numeric
<00062> 0000:             f_atoi:     equ  (BIOS+5dh)            ; convert ascii to integer
<00063> 0000:             f_uintout:  equ  (BIOS+60h)            ; convert unsigned integer to ascii
<00064> 0000:             f_intout:   equ  (BIOS+63h)            ; convert signed integer to ascii
<00065> 0000:             f_inmsg:    equ  (BIOS+66h)            ; type in-line message
<00066> 0000:             f_inputl:   equ  (BIOS+69h)            ; read limited line from console
<00067> 0000:             f_brktest:  equ  (BIOS+6ch)            ; check for serial break
<00068> 0000:             f_findtkn:  equ  (BIOS+6fh)            ; find token in a token table
<00069> 0000:             f_isalpha:  equ  (BIOS+72h)            ; determine if D is alphabetic
<00070> 0000:             f_ishex:    equ  (BIOS+75h)            ; determine if D is hexadecimal
<00071> 0000:             f_isalnum:  equ  (BIOS+78h)            ; determine if D is alpha or numeric
<00072> 0000:             f_idnum:    equ  (BIOS+7bh)            ; determine type of ascii number
<00073> 0000:             f_isterm:   equ  (BIOS+7eh)            ; determine if D is a termination char
<00074> 0000:             f_getdev:   equ  (BIOS+81h)            ; get supported devices
<00075>                   
<00076> 0000:             f_version:  equ  (BIOS+0f9h)           ; 3 bytes holding bios version number
<00077>                   
<00078>                   ; "Extended" BIOS vectors
<00079>                   
<00080> 0000:             f_bread:    equ  (EBIOS+00h)        ; read from onboard serial port
<00081> 0000:             f_btype:    equ  (EBIOS+03h)        ; write to onboard serial port
<00082> 0000:             f_btest:    equ  (EBIOS+06h)        ; test onboard serial port
<00083> 0000:             f_utype:    equ  (EBIOS+09h)        ; write to disk board UART
<00084> 0000:             f_uread:    equ  (EBIOS+0ch)        ; read from disk board UART
<00085> 0000:             f_utest:    equ  (EBIOS+0fh)        ; test disk board UART
<00086> 0000:             f_usetbd:   equ  (EBIOS+12h)        ; set disk board UART baud rate and format
<00087> 0000:             f_gettod:   equ  (EBIOS+15h)        ; read time of day clock
<00088> 0000:             f_settod:   equ  (EBIOS+18h)        ; set time of day clock
<00089> 0000:             f_rdnvr:    equ  (EBIOS+1bh)        ; read non volatile RAM
<00090> 0000:             f_wrnvr:    equ  (EBIOS+1eh)        ; write non volatile RAM
<00091> 0000:             f_idesize:  equ  (EBIOS+21h)        ; return size of attached IDE drive(s)
<00092> 0000:             f_ideid:    equ  (EBIOS+24h)        ; return device data for IDE drive(s)
<00093> 0000:             f_tmtoas:   equ  (EBIOS+2ah)        ; time to ASCII string
<00094> 0000:             f_dttoas:   equ  (EBIOS+27h)        ; date to ASCII string
<00095> 0000:             f_rtctest:  equ  (EBIOS+2dh)        ; test size and presence of RTC/NVR
<00096> 0000:             f_astodt:   equ  (EBIOS+30h)        ; convert ASCII string to date
<00097> 0000:             f_astotm:   equ  (EBIOS+33h)        ; convert ASCII string to time
<00000>                   #include include/kernel.inc
<00001> 0000:             O_CLDBOOT:    equ    0300h             ; jump to cold boot routine
<00002> 0000:             O_WRMBOOT:    equ    0303h             ; jump to warm boot routine
<00003> 0000:             O_OPEN:       equ    0306h             ; open a file
<00004> 0000:             O_READ:       equ    0309h             ; read from file
<00005> 0000:             O_WRITE:      equ    030ch             ; write to file
<00006> 0000:             O_SEEK:       equ    030fh             ; seek to file position
<00007> 0000:             O_CLOSE:      equ    0312h             ; close file
<00008> 0000:             O_OPENDIR:    equ    0315h             ; open dir as a file
<00009> 0000:             O_DELETE:     equ    0318h             ; delete a file
<00010> 0000:             O_RENAME:     equ    031bh             ; rename a file
<00011> 0000:             O_EXEC:       equ    031eh             ; execute an external program
<00012> 0000:             O_MKDIR:      equ    0321h             ; make directory
<00013> 0000:             O_CHDIR:      equ    0324h             ; change directory
<00014> 0000:             O_RMDIR:      equ    0327h             ; remove directory
<00015> 0000:             O_RDLUMP:     equ    032Ah             ; read LAT entry
<00016> 0000:             O_RDLUMP32:   equ    040fh             ; read 32-bit LAT entry
<00017> 0000:             O_WRLUMP:     equ    032Dh             ; write LAT entry
<00018> 0000:             O_WRLUMP32:   equ    0421h             ; write LAT entry
<00019> 0000:             O_TYPE:       equ    0330h             ; passthrough for console output
<00020> 0000:             O_MSG:        equ    0333h             ; passthrough for console output
<00021> 0000:             O_READKEY:    equ    0336h             ; passthrough for console input
<00022> 0000:             O_INPUT:      equ    0339h             ; passthrough for console input
<00023> 0000:             O_PRTSTAT:    equ    033ch             ; printer status
<00024> 0000:             O_PRINT:      equ    033fh             ; output to printer
<00025> 0000:             O_EXECBIN:    equ    0342h             ; execute from default directory
<00026> 0000:             O_SETDEF:     equ    0345h             ; set/get default directory
<00027> 0000:             O_KINIT:      equ    0348h             ; reserved - do not use!!!
<00028> 0000:             O_INMSG:      equ    034bh             ; passthrough for console output
<00029> 0000:             O_GETDEV:     equ    034eh             ; passthrough to f_getdef
<00030> 0000:             O_GETTOD:     equ    0351h             ; passthrough to f_gettod
<00031> 0000:             O_SETTOD:     equ    0354h             ; passthrough to f_settod
<00032> 0000:             O_INPUTL:     equ    0357h             ; passthrough to f_inputl
<00033> 0000:             O_BOOT:       equ    035ah             ; passthrough to f_boot
<00034> 0000:             O_SETBD:      equ    0360h             ; passthrough to f_setbd
<00035> 0000:             O_INITCALL:   equ    0363h             ; passthrough to f_initcall
<00036> 0000:             O_BRKTEST:    equ    0366h             ; passthrough to f_brktest
<00037> 0000:             O_DEVCTRL:    equ    0369h             ; Hook for device control drivers
<00038> 0000:             O_ALLOC:      equ    036ch             ; passthrough to alloc
<00039> 0000:             O_DEALLOC:    equ    036fh             ; passthrough to dealloc
<00040> 0000:             O_TERMCTRL:   equ    0372h             ; Hook for terminal control drivers
<00041> 0000:             O_NBREAD:     equ    0375h             ; passthrough to f_nbread
<00042> 0000:             O_MEMBTRL:    equ    0378h             ; Hook for memory control drivers
<00043> 0000:             O_LMPTOSEC:   equ    0409h             ; convert lump to sector
<00044> 0000:             O_SECTOLMP:   equ    040ch             ; convert sector to lump
<00045> 0000:             O_DIRENT:     equ    037Bh             ; get dirent for a file
<00046> 0000:             O_RELSEC:     equ    0418h             ; find relative sector
<00047> 0000:             O_TRUNC:      equ    046ah             ; Truncate file
<00048> 0000:             O_VIDEO:      equ    0456h             ; video driver hook
<00049> 0000:             D_IDERESET:   equ    0444h             ; passthrough to f_idereset
<00050> 0000:             D_IDEREAD:    equ    0447h             ; passthrough to f_ideread
<00051> 0000:             D_IDEWRITE:   equ    044Ah             ; passthrough to f_idewrite
<00052> 0000:             D_REAPHEAP:   equ    044Dh             ; calls heap reaper to clean non-permanent heap blocks
<00053> 0000:             D_SAVESYS:    equ    0459h             ; save system sector
<00054> 0000:             D_DELCHAIN:   equ    0453h             ; delete an AU chain
<00055> 0000:             D_ALLOCAU:    equ    045eh             ; allocate an AU
<00056> 0000:             D_FREEDIRENT: equ    046dh             ; allocate a DIRENT
<00057> 0000:             I_SERVE:      equ    03f6h             ; address of interrupt chain head
<00058> 0000:             V_IVEC:       equ    03fdh             ; interrupt head
<00059> 0000:             V_DVEC:       equ    036ah             ; device head
<00060> 0000:             K_SYS_DTA:    equ    0100h             ; system sector DTA
<00061> 0000:             K_VER:        equ    0400h             ; kernel version number
<00062> 0000:             K_BUILD:      equ    0403h             ; kernel build number
<00063> 0000:             K_BMONTH:     equ    0405h             ; kernel build month
<00064> 0000:             K_BDAY:       equ    0406h             ; kernel build day
<00065> 0000:             K_BYEAR:      equ    0407h             ; kernel build month
<00066> 0000:             K_LASTSEC:    equ    042bh             ; sector currently in sys DTA
<00067> 0000:             K_CWD_LUMP:   equ    0436h             ; lump for current directory
<00068> 0000:             K_EXEC_AU:    equ    043Eh             ; executable starting AU
<00069> 0000:             K_HIMEM:      equ    0442h             ; high memory pointer
<00070> 0000:             K_LOWMEM:     equ    0465h             ; lowest memory heap can use
<00071> 0000:             K_RETVAL:     equ    0467h             ; D on program exit
<00072> 0000:             K_HEAP:       equ    0468h             ; heap pointer
<00073> 0000:             K_CLKFREQ:    equ    0470h             ; system clock frequency
<00074> 0000:             K_MONTH:      equ    0475h             ; date/time
<00075> 0000:             K_DAY:        equ    0476h
<00076> 0000:             K_YEAR:       equ    0477h
<00077> 0000:             K_HOUR:       equ    0478h
<00078> 0000:             K_MINUTE:     equ    0479h
<00079> 0000:             K_SECOND:     equ    047ah
<00080> 0000:             K_SECDEN:     equ    047bh
<00081> 0000:             K_SECNUM:     equ    047dh
<00082>                   
<00083>                   
<00000>                   #include include/elfc.inc
<00001>                   ;-------------------------------------------------------------------------------
<00002>                   ; elfc - a library for basic c language functions
<00003>                   ;-------------------------------------------------------------------------------
<00004> 0000:                       extrn   epush16
<00005> 0000:                       extrn   epush8
<00006> 0000:                       extrn   dpop16
<00007> 0000:                       extrn   abs16
<00008> 0000:                       extrn   add16
<00009> 0000:                       extrn   and16
<00010> 0000:                       extrn   atoi16
<00011> 0000:                       extrn   div16
<00012> 0000:                       extrn   eq16
<00013> 0000:                     	extrn   false16
<00014> 0000:                     	extrn   gt16
<00015> 0000:                     	extrn   gte16
<00016> 0000:                     	extrn   itoa16
<00017> 0000:                     	extrn   lfsrshift
<00018> 0000:                     	extrn   lt16
<00019> 0000:                     	extrn   lte16
<00020> 0000:                     	extrn   mdnorm16
<00021> 0000:                     	extrn   mod16
<00022> 0000:                     	extrn   mul16
<00023> 0000:                     	extrn   ne16
<00024> 0000:                     	extrn   neg16
<00025> 0000:                     	extrn   or16
<00026> 0000:                     	extrn   rnd16
<00027> 0000:                     	extrn   sgn16
<00028> 0000:                     	extrn   sub16
<00029> 0000:                     	extrn   tobcd16
<00030> 0000:                     	extrn   true16
<00031> 0000:                     	extrn   xor16
<00032> 0000:                       extrn   not16
<00033> 0000:                       extrn   bool16
<00034> 0000:                       extrn   inv16
<00035> 0000:                       extrn   shl16
<00036> 0000:                       extrn   shr16
<00037> 0000:                       extrn   vpush16
<00038> 0000:                       extrn   vpop16
<00039> 0000:                       extrn   vpush8
<00040> 0000:                       extrn   dpush16
<00041> 0000:                       extrn   dpush8
<00042> 0000:                       extrn   esmove
<00043> 0000:                       extrn   linit16
<00044> 0000:                       extrn   lstor16
<00045> 0000:                       extrn   lstor8
<00046> 0000:                       extrn   vstor16
<00047> 0000:                       extrn   vstor8
<00048> 0000:                       extrn   swap16
<00049> 0000:                       extrn   dget16
<00050> 0000:                       extrn   lpush16
<00051> 0000:                       extrn   lpush8
<00052> 0000:                       extrn   deref16
<00053> 0000:                       extrn   deref8
<00054> 0000:                       extrn   laddr16
<00055> 0000:                       extrn   pstor16
<00056> 0000:                       extrn   pstor8
<00057> 0000:                       extrn   scltos2
<00058> 0000:                       extrn   sclsos2
<00059> 0000:                       extrn   unscl2
<00060> 0000:                       extrn   vinc16
<00061> 0000:                       extrn   vdec16
<00062> 0000:                       extrn   vinc8
<00063> 0000:                       extrn   vdec8
<00064> 0000:                       extrn   linc16
<00065> 0000:                       extrn   ldec16
<00066> 0000:                       extrn   linc8
<00067> 0000:                       extrn   ldec8
<00068> 0000:                       extrn   lpinc16
<00069> 0000:                       extrn   lpdec16
<00070> 0000:                       extrn   vpinc16
<00071> 0000:                       extrn   vpdec16
<00072> 0000:                       extrn   psave
<00073> 0000:                       extrn   pinc16
<00074> 0000:                       extrn   pdec16
<00075> 0000:                       extrn   pinc8
<00076> 0000:                       extrn   pdec8
<00077> 0000:                       extrn   pincptr
<00078> 0000:                       extrn   pdecptr
<00079> 0000:                       extrn   escheck
<00080> 0000:                       extrn   ugt16
<00081> 0000:                     	extrn   uge16
<00082> 0000:                       extrn   ult16
<00083> 0000:                     	extrn   ule16
<00084> 0000:                       extrn   scltos4
<00085> 0000:                       extrn   sclsos4
<00086> 0000:                       extrn   unscl4
<00087> 0000:                       extrn   lget16
<00088> 0000:                       extrn   lget8
<00089> 0000:                       extrn   lset16
<00090>                   
<00091>                   ;-------------------------------------------------------------------------------
<00092>                   ; crt0 - Elf/OS c start-up library
<00093>                   ;-------------------------------------------------------------------------------
<00094> 0000:                       extrn   auto_err
[00009]                   
[00010] 0000:             	           proc fib
[00011]                   
[00012] 0000:                         extrn C_init
[00013]                   
[00014] 0000:                         extrn C_fdinit
[00015]                   
[00016] 0000:                         extrn C_fdtable
[00017]                   
[00018] 0000:                         extrn C_fildes
[00019]                   
[00020] 0000:                         extrn Cabort
[00021]                   
[00022] 0000:                         extrn Cabs
[00023]                   
[00024] 0000:                         extrn Catexit
[00025]                   
[00026] 0000:                         extrn Cexit
[00027]                   
[00028] 0000:                         extrn Cmalloc
[00029]                   
[00030] 0000:                         extrn Ccalloc
[00031]                   
[00032] 0000:                         extrn Crealloc
[00033]                   
[00034] 0000:                         extrn Cfree
[00035]                   
[00036] 0000:                         extrn Catoi
[00037]                   
[00038] 0000:                         extrn Citoa
[00039]                   
[00040] 0000:                         extrn Citox
[00041]                   
[00042] 0000:                         extrn Citou
[00043]                   
[00044] 0000:                         extrn Cdiv
[00045]                   
[00046] 0000:                         extrn Cbsearch
[00047]                   
[00048] 0000:                         extrn Cqsort
[00049]                   
[00050] 0000:                         extrn Crand
[00051]                   
[00052] 0000:                         extrn Csrand
[00053]                   
[00054] 0000:                         extrn Ccreat
[00055]                   
[00056] 0000:                         extrn Copen
[00057]                   
[00058] 0000:                         extrn Cclose
[00059]                   
[00060] 0000:                         extrn Cread
[00061]                   
[00062] 0000:                         extrn Cwrite
[00063]                   
[00064] 0000:                         extrn Clseek
[00065]                   
[00066] 0000:                         extrn Cunlink
[00067]                   
[00068] 0000:                         extrn Crename
[00069]                   
[00070] 0000:                         extrn Cmin
[00071]                   
[00072] 0000:                         extrn Cmax
[00073]                   
[00074] 0000:                         extrn Cstdin
[00075]                   
[00076] 0000:                         extrn Cstdout
[00077]                   
[00078] 0000:                         extrn Cstderr
[00079]                   
[00080] 0000:                         extrn Cputs
[00081]                   
[00082] 0000:                         extrn Cputstr
[00083]                   
[00084] 0000:                         extrn Cgets
[00085]                   
[00086] 0000:                         extrn Cputch
[00087]                   
[00088] 0000:                         extrn Cgetch
[00089]                   
[00090] 0000:                         extrn Cputchar
[00091]                   
[00092] 0000:                         extrn Cgetchar
[00093]                   
[00094] 0000:                         extrn Cfdopen
[00095]                   
[00096] 0000:                         extrn Cfclose
[00097]                   
[00098] 0000:                         extrn Cfopen
[00099]                   
[00100] 0000:                         extrn Cferror
[00101]                   
[00102] 0000:                         extrn Cfeof
[00103]                   
[00104] 0000:                         extrn Cclearerr
[00105]                   
[00106] 0000:                         extrn Cfgetc
[00107]                   
[00108] 0000:                         extrn Cfputc
[00109]                   
[00110] 0000:                         extrn Cfgets
[00111]                   
[00112] 0000:                         extrn Cfputs
[00113]                   
[00114] 0000:                         extrn Cungetc
[00115]                   
[00116] 0000:                         extrn Cfread
[00117]                   
[00118] 0000:                         extrn Cfwrite
[00119]                   
[00120] 0000:                         extrn Cfflush
[00121]                   
[00122] 0000:                         extrn Cfprintf
[00123]                   
[00124] 0000:                         extrn Ckprintf
[00125]                   
[00126] 0000:                         extrn Cprintf
[00127]                   
[00128] 0000:                         extrn Csprintf
[00129]                   
[00130] 0000:                         extrn Cvfprintf
[00131]                   
[00132] 0000:                         extrn Cvprintf
[00133]                   
[00134] 0000:                         extrn Cvsprintf
[00135]                   
[00136] 0000:                         extrn Cfscanf
[00137]                   
[00138] 0000:                         extrn Cscanf
[00139]                   
[00140] 0000:                         extrn Csscanf
[00141]                   
[00142] 0000:                         extrn Cfgetpos
[00143]                   
[00144] 0000:                         extrn Cfsetpos
[00145]                   
[00146] 0000:                         extrn Cfseek
[00147]                   
[00148] 0000:                         extrn Cftell
[00149]                   
[00150] 0000:                         extrn Cperror
[00151]                   
[00152] 0000:                         extrn Crewind
[00153]                   
[00154] 0000:                         extrn Cremove
[00155]                   
[00156] 0000:                         extrn Ctmpnam
[00157]                   
[00158] 0000:                         extrn Ctmpfile
[00159]                   
[00160] 0000:                         extrn Cfileno
[00161]                   	;----- cgpublic
[00162] 0000:             	              public Cfib
[00163]                   Cfib:	;---- cgentry
[00164] 0000: e2          	          sex   r2   				 ; make sure X = SP
[00165] 0001: 9b 73 8b 73 	          push  rb				 		 ; save current BP (base pointer)
[00166] 0005: 87 ab 97 bb 	          copy  r7, rb			 	 ; set BP to current ES location
[00167]                   	;----- begin stmt ------
[00168]                   	;----- begin if
[00169]                   	;----- cglit
[00170] 0009: d4 00 00    	 				call epush16
[00171] 000c: 00 00       	 				  dw 0
[00172]                   	;----- cgldlw
[00173] 000e: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00174] 0011: 00 00       	          dw  0  ;--- offset
[00175]                   	;----- queue_cmp
[00176]                   	;----- commit_cmp
[00177]                   	;----- cgeq
[00178] 0013: d4 00 00    	          call  eq16				   ; compare TOS == SOS on Expression Stack
[00179]                   
[00180]                   	;----- gensctrue
[00181]                   	;----- cgbrtrue
[00182]                   	;----- cgbr
[00183] 0016: d4 00 00    	 				 call  dget16        ; test result on expression stack for short circuit
[00184] 0019: 9a          	 				 ghi   ra            ; get MSB from result
[00185] 001a: 52          	 				 str   r2            ; save in M(X)
[00186] 001b: 8a          	 				 glo   ra            ; get LSB from result
[00187] 001c: f1          	 				 or                  ; D = MSB | LSB
[00188] 001d: ca 00 30    	 				 lbnz	L2           ; check for branch
[00189] 0020: d4 00 00    	 				 call  dpop16        ; remove short circuited value from expression stack
[00190]                   	;----- cglit
[00191] 0023: d4 00 00    	 				call epush16
[00192] 0026: 00 01       	 				  dw 1
[00193]                   	;----- cgldlw
[00194] 0028: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00195] 002b: 00 00       	          dw  0  ;--- offset
[00196]                   	;----- queue_cmp
[00197]                   	;----- commit_cmp
[00198]                   	;----- cgeq
[00199] 002d: d4 00 00    	          call  eq16				   ; compare TOS == SOS on Expression Stack
[00200]                   
[00201]                   
[00202]                   L2:
[00203]                   	;----- queue_bool
[00204]                   	;----- genbrfalse
[00205]                   	;----- genlogbr
[00206]                   	;----- cgbrfalse
[00207]                   	;----- cgbr
[00208] 0030: d4 00 00    	 				 call  dpop16        ; get result from expression stack
[00209] 0033: 9a          	 				 ghi   ra            ; get MSB from result
[00210] 0034: 52          	 				 str   r2            ; save in M(X)
[00211] 0035: 8a          	 				 glo   ra            ; get LSB from result
[00212] 0036: f1          	 				 or                  ; D = MSB | LSB
[00213] 0037: c2 00 48    	 				 lbz	L3           ; check for branch
[00214]                   	;----- begin stmt ------
[00215]                   	;----- begin stmt ------
[00216]                   	;----- begin return
[00217]                   	;----- cgldlw
[00218] 003a: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00219] 003d: 00 00       	          dw  0  ;--- offset
[00220]                   	;----- cgpopd
[00221] 003f: d4 00 00    	          call  dpop16   		 ; get result from expression stack
[00222]                   	;---- queue lbr L1
[00223]                   	;----- end return
[00224]                   	;----- end stmt ------
[00225]                   	;----- end stmt ------
[00226]                   	;----- cgjump
[00227] 0042: c0 00 87    	 				  lbr	L1
[00228]                   	;---- queue lbr L4
[00229]                   	;----- cgjump
[00230] 0045: c0 00 87    	 				  lbr	L4
[00231]                   
[00232]                   L3:
[00233]                   	;----- begin stmt ------
[00234]                   	;----- begin stmt ------
[00235]                   	;----- begin return
[00236]                   	;----- cgldlw
[00237] 0048: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00238] 004b: 00 00       	          dw  0  ;--- offset
[00239]                   	;----- cglit
[00240] 004d: d4 00 00    	 				call epush16
[00241] 0050: 00 01       	 				  dw 1
[00242]                   	;----- cgsub
[00243] 0052: d4 00 00    	          call  sub16				 ; subtract TOS from SOS on Expression Stack
[00244]                   
[00245]                   	;----- cgcall
[00246] 0055: d4 00 00    	          call  Cfib
[00247]                   	;----- cgstack
[00248] 0058: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00249] 005b: 00 02       	          dw  2  ;--- offset
[00250] 005d: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00251]                   	;---- queue dpush
[00252]                   	;------ commit push
[00253]                   	;----- cgpushd
[00254] 0060: d4 00 00    	          call  dpush16   		 ; put result on expression stack
[00255]                   	;----- cgldlw
[00256] 0063: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00257] 0066: 00 00       	          dw  0  ;--- offset
[00258]                   	;----- cglit
[00259] 0068: d4 00 00    	 				call epush16
[00260] 006b: 00 02       	 				  dw 2
[00261]                   	;----- cgsub
[00262] 006d: d4 00 00    	          call  sub16				 ; subtract TOS from SOS on Expression Stack
[00263]                   
[00264]                   	;----- cgcall
[00265] 0070: d4 00 00    	          call  Cfib
[00266]                   	;----- cgstack
[00267] 0073: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00268] 0076: 00 02       	          dw  2  ;--- offset
[00269] 0078: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00270]                   	;---- queue dpush
[00271]                   	;------ commit push
[00272]                   	;----- cgpushd
[00273] 007b: d4 00 00    	          call  dpush16   		 ; put result on expression stack
[00274]                   	;----- cgadd
[00275] 007e: d4 00 00    	          call  add16				 ; add TOS and SOS on Expression Stack
[00276]                   
[00277]                   	;----- cgpopd
[00278] 0081: d4 00 00    	          call  dpop16   		 ; get result from expression stack
[00279]                   	;---- queue lbr L1
[00280]                   	;----- end return
[00281]                   	;----- end stmt ------
[00282]                   	;----- end stmt ------
[00283]                   	;----- cgjump
[00284] 0084: c0 00 87    	 				  lbr	L1
[00285]                   
[00286]                   L4:
[00287]                   	;----- end if
[00288]                   	;----- end stmt ------
[00289]                   
[00290]                   L1:
[00291]                   	;----- cgexit
[00292] 0087: e2          	          sex   r2            ; make sure X = SP
[00293] 0088: d4 00 00    	          call  escheck       ; check for expression stack creep
[00294] 008b: 60 72 ab f0 	          pop   rb				 		 ; restore BP (base pointer)
              bb 
[00295]                   
[00296] 0090: d5          	          rtn	  			 	     ; return to caller
[00297]                   	;----- cgpublic
[00298] 0091:             	              public Cmain
[00299]                   Cmain:
[00300]                     ;----- cgsetup
[00303]                   #endif
[00304]                   	;---- cgentry
[00305] 0091: e2          	          sex   r2   				 ; make sure X = SP
[00306] 0092: 9b 73 8b 73 	          push  rb				 		 ; save current BP (base pointer)
[00307] 0096: 87 ab 97 bb 	          copy  r7, rb			 	 ; set BP to current ES location
[00308]                   	;----- cgstack
[00309] 009a: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00310] 009d: ff fc       	          dw  -4  ;--- offset
[00311] 009f: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00312]                   	;----- begin stmt ------
[00313]                   	;---- queue lbr L7
[00314]                   	;----- cgjump
[00315] 00a2: c0 00 c3    	 				  lbr	L7
[00316]                   
[00317]                   L6:
[00318] 00a5: 46 69 72 73   db 'First ten Fibonacci numbers:', 10    ;----- cgdefs
              74 20 74 65 
              6e 20 46 69 
              62 6f 6e 61 
              63 63 69 20 
              6e 75 6d 62 
              65 72 73 3a 
              0a 
[00319] 00c2: 00          	db	$00    ;----- cgdefb
[00320]                   
[00321]                   L7:
[00322]                   	;----- cgldlab
[00323] 00c3: d4 00 00    	 				call epush16
[00324] 00c6: 00 a5       	 				  dw  L6
[00325]                   	;----- cgcall
[00326] 00c8: d4 00 00    	          call  Cprintf
[00327]                   	;----- cgstack
[00328] 00cb: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00329] 00ce: 00 02       	          dw  2  ;--- offset
[00330] 00d0: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00331]                   	;---- queue dpush
[00332]                   	;----- push + pop data not required, data remains unchanged in RA
[00333]                   	;----- end stmt ------
[00334]                   	;----- begin stmt ------
[00335]                   	;----- begin for
[00336]                   	;----- cglit
[00337] 00d3: d4 00 00    	 				call epush16
[00338] 00d6: 00 00       	 				  dw 0
[00339]                   	;----- cgstorlw
[00340] 00d8: d4 00 00    	          call  lstor16      ; store value from ES in local variable
[00341] 00db: ff fe       	          dw  -2  ;--- offset
[00342]                   	;----- cgpopd
[00343] 00dd: d4 00 00    	          call  dpop16   		 ; get result from expression stack
[00344]                   
[00345]                   L8:
[00346]                   	;----- cgldlw
[00347] 00e0: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00348] 00e3: ff fe       	          dw  -2  ;--- offset
[00349]                   	;----- cglit
[00350] 00e5: d4 00 00    	 				call epush16
[00351] 00e8: 00 0a       	 				  dw 10
[00352]                   	;----- queue_cmp
[00353]                   	;----- genbrfalse
[00354]                   	;----- genbranch
[00355]                   	;----- cgbrlt
[00356]                   	;----- cglt
[00357] 00ea: d4 00 00    	          call  lt16				   ; compare TOS < SOS on Expression Stack
[00358]                   
[00359]                   	;----- cgbrcond
[00360] 00ed: d4 00 00    	 				 call  dpop16        ; get result from expression stack
[00361] 00f0: 9a          	 				 ghi   ra            ; get MSB from result
[00362] 00f1: 52          	 				 str   r2            ; save in M(X)
[00363] 00f2: 8a          	 				 glo   ra            ; get LSB from result
[00364] 00f3: f1          	 				 or                  ; D = MSB | LSB
[00365] 00f4: ca 00 fa    	lbnz	L12
[00366] 00f7: c0 01 8e    	lbr	L10
[00367]                   
[00368]                   L12:
[00369]                   	;---- queue lbr L9
[00370]                   	;----- cgjump
[00371] 00fa: c0 01 0d    	 				  lbr	L9
[00372]                   
[00373]                   L11:
[00374]                   	;----- cgldlw
[00375] 00fd: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00376] 0100: ff fe       	          dw  -2  ;--- offset
[00377]                   	;----- cginclw
[00378] 0102: d4 00 00    	          call  linc16       ; increment local variable
[00379] 0105: ff fe       	          dw  -2  ;--- offset
[00380]                   	;----- cgpopd
[00381] 0107: d4 00 00    	          call  dpop16   		 ; get result from expression stack
[00382]                   	;---- queue lbr L8
[00383]                   	;----- cgjump
[00384] 010a: c0 00 e0    	 				  lbr	L8
[00385]                   
[00386]                   L9:
[00387]                   	;----- begin stmt ------
[00388]                   	;----- begin stmt ------
[00389]                   	;----- cgldlw
[00390] 010d: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00391] 0110: ff fe       	          dw  -2  ;--- offset
[00392]                   	;----- cgcall
[00393] 0112: d4 00 00    	          call  Cfib
[00394]                   	;----- cgstack
[00395] 0115: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00396] 0118: 00 02       	          dw  2  ;--- offset
[00397] 011a: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00398]                   	;---- queue dpush
[00399]                   	;------ commit push
[00400]                   	;----- cgpushd
[00401] 011d: d4 00 00    	          call  dpush16   		 ; put result on expression stack
[00402]                   	;----- cgstorlw
[00403] 0120: d4 00 00    	          call  lstor16      ; store value from ES in local variable
[00404] 0123: ff fc       	          dw  -4  ;--- offset
[00405]                   	;----- cgpopd
[00406] 0125: d4 00 00    	          call  dpop16   		 ; get result from expression stack
[00407]                   	;----- end stmt ------
[00408]                   	;----- begin stmt ------
[00409]                   	;---- queue lbr L14
[00410]                   	;----- cgjump
[00411] 0128: c0 01 2e    	 				  lbr	L14
[00412]                   
[00413]                   L13:
[00414] 012b: 25 64         db '%d'    ;----- cgdefs
[00415] 012d: 00          	db	$00    ;----- cgdefb
[00416]                   
[00417]                   L14:
[00418]                   	;----- cgldlw
[00419] 012e: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00420] 0131: ff fc       	          dw  -4  ;--- offset
[00421]                   	;----- cgldlab
[00422] 0133: d4 00 00    	 				call epush16
[00423] 0136: 01 2b       	 				  dw  L13
[00424]                   	;----- cgcall
[00425] 0138: d4 00 00    	          call  Cprintf
[00426]                   	;----- cgstack
[00427] 013b: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00428] 013e: 00 04       	          dw  4  ;--- offset
[00429] 0140: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00430]                   	;---- queue dpush
[00431]                   	;----- push + pop data not required, data remains unchanged in RA
[00432]                   	;----- end stmt ------
[00433]                   	;----- begin stmt ------
[00434]                   	;----- begin if
[00435]                   	;----- cglit
[00436] 0143: d4 00 00    	 				call epush16
[00437] 0146: 00 09       	 				  dw 9
[00438]                   	;----- cgldlw
[00439] 0148: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00440] 014b: ff fe       	          dw  -2  ;--- offset
[00441]                   	;----- queue_cmp
[00442]                   	;----- genbrfalse
[00443]                   	;----- genbranch
[00444]                   	;----- cgbreq
[00445]                   	;----- cgeq
[00446] 014d: d4 00 00    	          call  eq16				   ; compare TOS == SOS on Expression Stack
[00447]                   
[00448]                   	;----- cgbrcond
[00449] 0150: d4 00 00    	 				 call  dpop16        ; get result from expression stack
[00450] 0153: 9a          	 				 ghi   ra            ; get MSB from result
[00451] 0154: 52          	 				 str   r2            ; save in M(X)
[00452] 0155: 8a          	 				 glo   ra            ; get LSB from result
[00453] 0156: f1          	 				 or                  ; D = MSB | LSB
[00454] 0157: ca 01 5d    	lbnz	L16
[00455] 015a: c0 01 75    	lbr	L15
[00456]                   
[00457]                   L16:
[00458]                   	;----- begin stmt ------
[00459]                   	;---- queue lbr L18
[00460]                   	;----- cgjump
[00461] 015d: c0 01 62    	 				  lbr	L18
[00462]                   
[00463]                   L17:
[00464] 0160: 0a            db 10    ;----- cgdefs
[00465] 0161: 00          	db	$00    ;----- cgdefb
[00466]                   
[00467]                   L18:
[00468]                   	;----- cgldlab
[00469] 0162: d4 00 00    	 				call epush16
[00470] 0165: 01 60       	 				  dw  L17
[00471]                   	;----- cgcall
[00472] 0167: d4 00 00    	          call  Cprintf
[00473]                   	;----- cgstack
[00474] 016a: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00475] 016d: 00 02       	          dw  2  ;--- offset
[00476] 016f: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00477]                   	;---- queue dpush
[00478]                   	;----- push + pop data not required, data remains unchanged in RA
[00479]                   	;----- end stmt ------
[00480]                   	;---- queue lbr L19
[00481]                   	;----- cgjump
[00482] 0172: c0 01 8b    	 				  lbr	L19
[00483]                   
[00484]                   L15:
[00485]                   	;----- begin stmt ------
[00486]                   	;---- queue lbr L21
[00487]                   	;----- cgjump
[00488] 0175: c0 01 7b    	 				  lbr	L21
[00489]                   
[00490]                   L20:
[00491] 0178: 2c 20         db ', '    ;----- cgdefs
[00492] 017a: 00          	db	$00    ;----- cgdefb
[00493]                   
[00494]                   L21:
[00495]                   	;----- cgldlab
[00496] 017b: d4 00 00    	 				call epush16
[00497] 017e: 01 78       	 				  dw  L20
[00498]                   	;----- cgcall
[00499] 0180: d4 00 00    	          call  Cprintf
[00500]                   	;----- cgstack
[00501] 0183: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00502] 0186: 00 02       	          dw  2  ;--- offset
[00503] 0188: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00504]                   	;---- queue dpush
[00505]                   	;----- push + pop data not required, data remains unchanged in RA
[00506]                   	;----- end stmt ------
[00507]                   
[00508]                   L19:
[00509]                   	;----- end if
[00510]                   	;----- end stmt ------
[00511]                   	;----- end stmt ------
[00512]                   	;---- queue lbr L11
[00513]                   	;----- cgjump
[00514] 018b: c0 00 fd    	 				  lbr	L11
[00515]                   
[00516]                   L10:
[00517]                   	;----- end for
[00518]                   	;----- end stmt ------
[00519]                   	;----- begin stmt ------
[00520]                   	;----- begin return
[00521]                   	;----- cgldlw
[00522] 018e: d4 00 00    	          call  lpush16       ; push value of local variable on ES
[00523] 0191: ff fc       	          dw  -4  ;--- offset
[00524]                   	;----- cgpopd
[00525] 0193: d4 00 00    	          call  dpop16   		 ; get result from expression stack
[00526]                   	;---- queue lbr L5
[00527]                   	;----- end return
[00528]                   	;----- end stmt ------
[00529]                   	;---- lbr L5 falls through
[00530]                   
[00531]                   L5:
[00532]                   	;----- cgstack
[00533] 0196: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00534] 0199: 00 04       	          dw  4  ;--- offset
[00535] 019b: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00536]                   	;----- cgexit
[00537] 019e: e2          	          sex   r2            ; make sure X = SP
[00538] 019f: d4 00 00    	          call  escheck       ; check for expression stack creep
[00539] 01a2: 60 72 ab f0 	          pop   rb				 		 ; restore BP (base pointer)
              bb 
[00540]                   
[00541] 01a7: d5          	          rtn	  			 	     ; return to caller
[00542]                   	;---- cgpostlude
[00543] 01a8:             	             endp
