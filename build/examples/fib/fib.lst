[00001]                   ; -------------------------------------------------------------------
[00002]                   ; This file generated by ElfC, based on SubC
[00003]                   ; SubC Copyright 2012-2025 by Nils Holm
[00004]                   ; -------------------------------------------------------------------
<00000>                   #include include/ops_c.inc
<00001>                   ;------------------------------------------------------
<00002>                   ; ElfC Asm/02 Opcodes
<00003>                   ;------------------------------------------------------
<00004>                   
<00005>                   .op "PUSH","N","9$1 73 8$1 73"
<00006>                   .op "POP","N","60 72 A$1 F0 B$1"
<00007>                   .op "CALL","W","D4 H1 L1"
<00008>                   .op "RTN","","D5"
<00009>                   .op "CLC","","FC 00"
<00010>                   .op "STC","","FF 00"
<00011>                   .op "COPY","NR","8$1 A$2 9$1 B$2"
<00012>                   .op "LOAD","NW","F8 L2 A$1 F8 H2 B$1"
<00013>                   .op "MATCH","NW","8$1 FF L2 52 9$1 7F H2 F1"
<00014>                   .op "BRKPT","","79 D1"
<00015>                   .op "ADDR16","NR","8$2 52 8$1 F4 A$1 9$2 52 9$1 74 B$1"
<00016>                   .op "SUBR16","NR","8$2 52 8$1 F7 A$1 9$2 52 9$1 77 B$1"
<00017>                   .op "GOSUB","W","D9 L1"
<00018>                   .op "RSUB","","C0 21 00"
<00019>                   
<00020>                   ;------------------- end ops_c.inc --------------------
<00000>                   #include include/os_api.inc
<00001>                   ;--------------------------------------------------------------------
<00002>                   ; Elf/OS and Mini/DOS Kernel API
<00003>                   ;--------------------------------------------------------------------
<00004>                   
<00005> 0000:             O_OPEN:       equ    0306h             ; open a file
<00006> 0000:             O_READ:       equ    0309h             ; read from file
<00007> 0000:             O_WRITE:      equ    030ch             ; write to file
<00008> 0000:             O_SEEK:       equ    030fh             ; seek to file position
<00009> 0000:             O_CLOSE:      equ    0312h             ; close file
<00010> 0000:             O_DELETE:     equ    0318h             ; delete a file
<00011> 0000:             O_RENAME:     equ    031bh             ; rename a file
<00012> 0000:             O_TYPE:       equ    0330h             ; console character output
<00013> 0000:             O_MSG:        equ    0333h             ; console string output
<00014> 0000:             O_READKEY:    equ    0336h             ; console character input
<00015> 0000:             O_INPUT:      equ    0339h             ; console string input
<00016> 0000:             O_INMSG:      equ    034bh             ; console inline messae output
<00017> 0000:             O_GETDEV:     equ    034eh             ; get device information
<00018> 0000:             O_GETTOD:     equ    0351h             ; get time of day
<00019> 0000:             O_ALLOC:      equ    036ch             ; alloc memory block
<00020> 0000:             O_DEALLOC:    equ    036fh             ; dealloc memory block
<00021>                   
<00022>                   ;--------------------------------------------------------------------
<00023>                   ; Elf/OS and Mini/DOS Data Locations
<00024>                   ;--------------------------------------------------------------------
<00025>                   
<00026> 0000:             K_KEYBUF:     equ    0080h             ; input key buffer
<00027> 0000:             K_MONTH:      equ    0475h             ; date/time information
<00028>                   
<00029>                   ;-------------------------- end os_api.inc --------------------------
<00000>                   #include include/elfc.inc
<00001>                   ;----------------------------------
<00002>                   ; ElfC - crt0 subroutine vectors
<00003>                   ;----------------------------------
<00004>                   
<00005>                   #define SUBTBL   $2100
<00006> 0000:             s_return:  equ  SUBTBL
<00007>                   
<00008> 0000:             s_esmove:  equ  (SUBTBL + $03)
<00009> 0000:             s_stkchk:  equ  (SUBTBL + $06)
<00010> 0000:             s_dpop16:  equ  (SUBTBL + $09)
<00011> 0000:             s_dpush16: equ  (SUBTBL + $0C)
<00012> 0000:             s_dget16:  equ  (SUBTBL + $0F)
<00013> 0000:             s_epush16: equ  (SUBTBL + $12)
<00014> 0000:             s_vpop16:  equ  (SUBTBL + $15)
<00015> 0000:             s_vpush8:  equ  (SUBTBL + $18)
<00016> 0000:             s_vpush16: equ  (SUBTBL + $1B)
<00017> 0000:             s_vstor8:  equ  (SUBTBL + $1E)
<00018> 0000:             s_vstor16: equ  (SUBTBL + $21)
<00019> 0000:             s_vinc8:   equ  (SUBTBL + $24)
<00020> 0000:             s_vinc16:  equ  (SUBTBL + $27)
<00021> 0000:             s_vdec8:   equ  (SUBTBL + $2A)
<00022> 0000:             s_vdec16:  equ  (SUBTBL + $2D)
<00023> 0000:             s_vpinc16: equ  (SUBTBL + $30)
<00024> 0000:             s_vpdec16: equ  (SUBTBL + $33)
<00025> 0000:             s_linit16: equ  (SUBTBL + $36)
<00026> 0000:             s_lstor8:  equ  (SUBTBL + $39)
<00027> 0000:             s_lstor16: equ  (SUBTBL + $3C)
<00028> 0000:             s_lpush8:  equ  (SUBTBL + $3F)
<00029> 0000:             s_lpush16: equ  (SUBTBL + $42)
<00030> 0000:             s_lget16:  equ  (SUBTBL + $45)
<00031> 0000:             s_lset16:  equ  (SUBTBL + $48)
<00032> 0000:             s_linc8:   equ  (SUBTBL + $4B)
<00033> 0000:             s_linc16:  equ  (SUBTBL + $4E)
<00034> 0000:             s_ldec8:   equ  (SUBTBL + $51)
<00035> 0000:             s_ldec16:  equ  (SUBTBL + $54)
<00036> 0000:             s_lpinc16: equ  (SUBTBL + $57)
<00037> 0000:             s_lpdec16: equ  (SUBTBL + $5A)
<00038> 0000:             s_psave:   equ  (SUBTBL + $5D)
<00039> 0000:             s_pstor8:  equ  (SUBTBL + $60)
<00040> 0000:             s_pstor16: equ  (SUBTBL + $63)
<00041> 0000:             s_pinc8:   equ  (SUBTBL + $66)
<00042> 0000:             s_pinc16:  equ  (SUBTBL + $69)
<00043> 0000:             s_pdec8:   equ  (SUBTBL + $6C)
<00044> 0000:             s_pdec16:  equ  (SUBTBL + $6F)
<00045> 0000:             s_pincptr: equ  (SUBTBL + $72)
<00046> 0000:             s_pdecptr: equ  (SUBTBL + $75)
<00047> 0000:             s_laddr16: equ  (SUBTBL + $78)
<00048> 0000:             s_deref8:  equ  (SUBTBL + $7B)
<00049> 0000:             s_deref16: equ  (SUBTBL + $7E)
<00050> 0000:             s_swap16:  equ  (SUBTBL + $81)
<00051> 0000:             s_add16:   equ  (SUBTBL + $84)
<00052> 0000:             s_sub16:   equ  (SUBTBL + $87)
<00053> 0000:             s_neg16:   equ  (SUBTBL + $8A)
<00054> 0000:             s_mdsgn16: equ  (SUBTBL + $8D)
<00055> 0000:             s_mul16:   equ  (SUBTBL + $90)
<00056> 0000:             s_div16:   equ  (SUBTBL + $93)
<00057> 0000:             s_mod16:   equ  (SUBTBL + $96)
<00058> 0000:             s_bool16:  equ  (SUBTBL + $99)
<00059> 0000:             s_true16:  equ  (SUBTBL + $9C)
<00060> 0000:             s_false16: equ  (SUBTBL + $9F)
<00061> 0000:             s_and16:   equ  (SUBTBL + $A2)
<00062> 0000:             s_or16:    equ  (SUBTBL + $A5)
<00063> 0000:             s_xor16:   equ  (SUBTBL + $A8)
<00064> 0000:             s_not16:   equ  (SUBTBL + $AB)
<00065> 0000:             s_inv16:   equ  (SUBTBL + $AE)
<00066> 0000:             s_shl16:   equ  (SUBTBL + $B1)
<00067> 0000:             s_shr16:   equ  (SUBTBL + $B4)
<00068> 0000:             s_eq16:    equ  (SUBTBL + $B7)
<00069> 0000:             s_gt16:    equ  (SUBTBL + $BA)
<00070> 0000:             s_gte16:   equ  (SUBTBL + $BD)
<00071> 0000:             s_lt16:    equ  (SUBTBL + $C0)
<00072> 0000:             s_lte16:   equ  (SUBTBL + $C3)
<00073> 0000:             s_ne16:    equ  (SUBTBL + $C6)
<00074> 0000:             s_ugt16:   equ  (SUBTBL + $C9)
<00075> 0000:             s_uge16:   equ  (SUBTBL + $CC)
<00076> 0000:             s_ult16:   equ  (SUBTBL + $CF)
<00077> 0000:             s_ule16:   equ  (SUBTBL + $D2)
<00078> 0000:             s_scltos2: equ  (SUBTBL + $D5)
<00079> 0000:             s_scltos4: equ  (SUBTBL + $D8)
<00080> 0000:             s_sclsos2: equ  (SUBTBL + $DB)
<00081> 0000:             s_sclsos4: equ  (SUBTBL + $DE)
<00082> 0000:             s_unscl2:  equ  (SUBTBL + $E1)
<00083> 0000:             s_unscl4:  equ  (SUBTBL + $E4)
<00084>                   
<00085>                   ;----------------------------------
<00086>                   ; ElfC crt0 - error vectors
<00087>                   ;----------------------------------
<00088>                   
<00089> 0000:                       extrn   auto_err
<00090> 0000:                       extrn   stk_err
<00091>                   
<00092>                   ;---------- end elfc.inc ----------
[00008]                   
[00009] 0000:             	           proc fib
[00010]                   
<00000>                   #include include/stdlib.inc
<00001> 0000:                          extrn C_init
<00002> 0000:                          extrn C_fdinit
<00003> 0000:                          extrn C_fdtable
<00004> 0000:                          extrn C_fildes
<00005> 0000:                          extrn Cabort
<00006> 0000:                          extrn Cabs
<00007> 0000:                          extrn Catexit
<00008> 0000:                          extrn Cexit
<00009> 0000:                          extrn Cmalloc
<00010> 0000:                          extrn Ccalloc
<00011> 0000:                          extrn Crealloc
<00012> 0000:                          extrn Cfree
<00013> 0000:                          extrn Catoi
<00014> 0000:                          extrn Citoa
<00015> 0000:                          extrn Citox
<00016> 0000:                          extrn Citou
<00017> 0000:                          extrn Cdiv
<00018> 0000:                          extrn Cbsearch
<00019> 0000:                          extrn Cqsort
<00020> 0000:                          extrn Crand
<00021> 0000:                          extrn Csrand
<00022> 0000:                          extrn Ccreat
<00023> 0000:                          extrn Copen
<00024> 0000:                          extrn Cclose
<00025> 0000:                          extrn Cread
<00026> 0000:                          extrn Cwrite
<00027> 0000:                          extrn Clseek
<00028> 0000:                          extrn Cunlink
<00029> 0000:                          extrn Crename
<00030> 0000:                          extrn Cmin
<00031> 0000:                          extrn Cmax
[00012]                   
<00000>                   #include include/stdio.inc
<00001> 0000:                          extrn Cstdin
<00002> 0000:                          extrn Cstdout
<00003> 0000:                          extrn Cstderr
<00004> 0000:                          extrn Cputs
<00005> 0000:                          extrn Cputstr
<00006> 0000:                          extrn Cgets
<00007> 0000:                          extrn Cputch
<00008> 0000:                          extrn Cgetch
<00009> 0000:                          extrn Cputchar
<00010> 0000:                          extrn Cgetchar
<00011> 0000:                          extrn Cfdopen
<00012> 0000:                          extrn Cfclose
<00013> 0000:                          extrn Cfopen
<00014> 0000:                          extrn Cferror
<00015> 0000:                          extrn Cfeof
<00016> 0000:                          extrn Cclearerr
<00017> 0000:                          extrn Cfgetc
<00018> 0000:                          extrn Cfputc
<00019> 0000:                          extrn Cfgets
<00020> 0000:                          extrn Cfputs
<00021> 0000:                          extrn Cungetc
<00022> 0000:                          extrn Cfread
<00023> 0000:                          extrn Cfwrite
<00024> 0000:                          extrn Cfflush
<00025> 0000:                          extrn Cfprintf
<00026> 0000:                          extrn Ckprintf
<00027> 0000:                          extrn Cprintf
<00028> 0000:                          extrn Csprintf
<00029> 0000:                          extrn Cvfprintf
<00030> 0000:                          extrn Cvprintf
<00031> 0000:                          extrn Cvsprintf
<00032> 0000:                          extrn Cfscanf
<00033> 0000:                          extrn Cscanf
<00034> 0000:                          extrn Csscanf
<00035> 0000:                          extrn Cfgetpos
<00036> 0000:                          extrn Cfsetpos
<00037> 0000:                          extrn Cfseek
<00038> 0000:                          extrn Cftell
<00039> 0000:                          extrn Cperror
<00040> 0000:                          extrn Crewind
<00041> 0000:                          extrn Cremove
<00042> 0000:                          extrn Ctmpnam
<00043> 0000:                          extrn Ctmpfile
<00044> 0000:                          extrn Cfileno
[00014]                   	;----- cgpublic
[00015] 0000:             	              public Cfib
[00016]                   Cfib:	;---- cgentry
[00017] 0000: e2          	          sex   r2   				 ; make sure X = SP
[00018] 0001: 9b 73 8b 73 	          push  rb				 		 ; save current BP (base pointer)
[00019] 0005: 87 ab 97 bb 	          copy  r7, rb			 	 ; set BP to current ES location
[00020]                   	;----- begin stmt ------
[00021]                   	;----- begin if
[00022]                   	;----- cglit
[00023] 0009: d9 12       	 				gosub s_epush16
[00024] 000b: 00 00       	 				  dw 0
[00025]                   	;----- cgldlw
[00026] 000d: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00027] 000f: 00 00       	          dw  0  ;--- offset
[00028]                   	;----- queue_cmp
[00029]                   	;----- commit_cmp
[00030]                   	;----- cgeq
[00031] 0011: d9 b7       	          gosub s_eq16				   ; compare TOS == SOS on Expression Stack
[00032]                   
[00033]                   	;----- gensctrue
[00034]                   	;----- cgbrtrue
[00035]                   	;----- cgbr
[00036] 0013: d9 0f       	 				 gosub s_dget16       ; test result on expression stack for short circuit
[00037] 0015: 9a          	 				 ghi   ra            ; get MSB from result
[00038] 0016: 52          	 				 str   r2            ; save in M(X)
[00039] 0017: 8a          	 				 glo   ra            ; get LSB from result
[00040] 0018: f1          	 				 or                  ; D = MSB | LSB
[00041] 0019: ca 00 28    	 				 lbnz	L2           ; check for branch
[00042] 001c: d9 09       	 				 gosub s_dpop16       ; remove short circuited value from expression stack
[00043]                   	;----- cglit
[00044] 001e: d9 12       	 				gosub s_epush16
[00045] 0020: 00 01       	 				  dw 1
[00046]                   	;----- cgldlw
[00047] 0022: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00048] 0024: 00 00       	          dw  0  ;--- offset
[00049]                   	;----- queue_cmp
[00050]                   	;----- commit_cmp
[00051]                   	;----- cgeq
[00052] 0026: d9 b7       	          gosub s_eq16				   ; compare TOS == SOS on Expression Stack
[00053]                   
[00054]                   
[00055]                   L2:
[00056]                   	;----- queue_bool
[00057]                   	;----- genbrfalse
[00058]                   	;----- genlogbr
[00059]                   	;----- cgbrfalse
[00060]                   	;----- cgbr
[00061] 0028: d9 09       	 				 gosub s_dpop16       ; get result from expression stack
[00062] 002a: 9a          	 				 ghi   ra            ; get MSB from result
[00063] 002b: 52          	 				 str   r2            ; save in M(X)
[00064] 002c: 8a          	 				 glo   ra            ; get LSB from result
[00065] 002d: f1          	 				 or                  ; D = MSB | LSB
[00066] 002e: c2 00 3d    	 				 lbz	L3           ; check for branch
[00067]                   	;----- begin stmt ------
[00068]                   	;----- begin stmt ------
[00069]                   	;----- begin return
[00070]                   	;----- cgldlw
[00071] 0031: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00072] 0033: 00 00       	          dw  0  ;--- offset
[00073]                   	;----- cgpopd
[00074] 0035: d9 09       	          gosub s_dpop16   		 ; get result from expression stack
[00075]                   	;---- queue lbr L1
[00076]                   	;----- end return
[00077]                   	;----- end stmt ------
[00078]                   	;----- end stmt ------
[00079]                   	;----- cgjump
[00080] 0037: c0 00 70    	 				  lbr	L1
[00081]                   	;---- queue lbr L4
[00082]                   	;----- cgjump
[00083] 003a: c0 00 70    	 				  lbr	L4
[00084]                   
[00085]                   L3:
[00086]                   	;----- begin stmt ------
[00087]                   	;----- begin stmt ------
[00088]                   	;----- begin return
[00089]                   	;----- cgldlw
[00090] 003d: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00091] 003f: 00 00       	          dw  0  ;--- offset
[00092]                   	;----- cglit
[00093] 0041: d9 12       	 				gosub s_epush16
[00094] 0043: 00 01       	 				  dw 1
[00095]                   	;----- cgsub
[00096] 0045: d9 87       	          gosub s_sub16				 ; subtract TOS from SOS on Expression Stack
[00097]                   
[00098]                   	;----- cgcall
[00099] 0047: d4 00 00    	          call  Cfib
[00100]                   	;----- cgstack
[00101] 004a: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00102] 004c: 00 02       	          dw  2  ;--- offset
[00103] 004e: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00104]                   	;---- queue dpush
[00105]                   	;------ commit push
[00106]                   	;----- cgpushd
[00107] 0051: d9 0c       	          gosub s_dpush16   	 ; put result on expression stack
[00108]                   	;----- cgldlw
[00109] 0053: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00110] 0055: 00 00       	          dw  0  ;--- offset
[00111]                   	;----- cglit
[00112] 0057: d9 12       	 				gosub s_epush16
[00113] 0059: 00 02       	 				  dw 2
[00114]                   	;----- cgsub
[00115] 005b: d9 87       	          gosub s_sub16				 ; subtract TOS from SOS on Expression Stack
[00116]                   
[00117]                   	;----- cgcall
[00118] 005d: d4 00 00    	          call  Cfib
[00119]                   	;----- cgstack
[00120] 0060: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00121] 0062: 00 02       	          dw  2  ;--- offset
[00122] 0064: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00123]                   	;---- queue dpush
[00124]                   	;------ commit push
[00125]                   	;----- cgpushd
[00126] 0067: d9 0c       	          gosub s_dpush16   	 ; put result on expression stack
[00127]                   	;----- cgadd
[00128] 0069: d9 84       	          gosub s_add16				 ; add TOS and SOS on Expression Stack
[00129]                   
[00130]                   	;----- cgpopd
[00131] 006b: d9 09       	          gosub s_dpop16   		 ; get result from expression stack
[00132]                   	;---- queue lbr L1
[00133]                   	;----- end return
[00134]                   	;----- end stmt ------
[00135]                   	;----- end stmt ------
[00136]                   	;----- cgjump
[00137] 006d: c0 00 70    	 				  lbr	L1
[00138]                   
[00139]                   L4:
[00140]                   	;----- end if
[00141]                   	;----- end stmt ------
[00142]                   
[00143]                   L1:
[00144]                   	;----- cgexit
[00145] 0070: e2          	          sex   r2            ; make sure X = SP
[00146] 0071: d9 06       	          gosub s_stkchk      ; check for expression stack creep
[00147] 0073: c3 00 00    	          lbdf  stk_err			 ; exit immediately when stack creep error occurs
[00148] 0076: 60 72 ab f0 	          pop   rb				 		 ; restore BP (base pointer)
              bb 
[00149]                   
[00150] 007b: d5          	          rtn    			 	     ; return to caller
[00151]                   
[00152]                   ;----- string table
[00153]                   	;----- cgpublic
[00154] 007c:             	              public Cmain
[00155]                   Cmain:
[00156]                     ;----- cgsetup
[00159]                   #endif
[00160]                   	;---- cgentry
[00161] 007c: e2          	          sex   r2   				 ; make sure X = SP
[00162] 007d: 9b 73 8b 73 	          push  rb				 		 ; save current BP (base pointer)
[00163] 0081: 87 ab 97 bb 	          copy  r7, rb			 	 ; set BP to current ES location
[00164]                   	;----- cgstack
[00165] 0085: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00166] 0087: ff fc       	          dw  -4  ;--- offset
[00167] 0089: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00168]                   	;----- begin stmt ------
[00169]                   	;----- cgldlab
[00170] 008c: d9 12       	 				gosub s_epush16
[00171] 008e: 01 43       	 				  dw  L6
[00172]                   	;----- cgcall
[00173] 0090: d4 00 00    	          call  Cprintf
[00174]                   	;----- cgstack
[00175] 0093: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00176] 0095: 00 02       	          dw  2  ;--- offset
[00177] 0097: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00178]                   	;---- queue dpush
[00179]                   	;----- push + pop data not required, data remains unchanged in RA
[00180]                   	;----- end stmt ------
[00181]                   	;----- begin stmt ------
[00182]                   	;----- begin for
[00183]                   	;----- cglit
[00184] 009a: d9 12       	 				gosub s_epush16
[00185] 009c: 00 00       	 				  dw 0
[00186]                   	;----- cgstorlw
[00187] 009e: d9 3c       	          gosub s_lstor16      ; store value from ES in local variable
[00188] 00a0: ff fe       	          dw  -2  ;--- offset
[00189]                   	;----- cgpopd
[00190] 00a2: d9 09       	          gosub s_dpop16   		 ; get result from expression stack
[00191]                   
[00192]                   L7:
[00193]                   	;----- cgldlw
[00194] 00a4: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00195] 00a6: ff fe       	          dw  -2  ;--- offset
[00196]                   	;----- cglit
[00197] 00a8: d9 12       	 				gosub s_epush16
[00198] 00aa: 00 0a       	 				  dw 10
[00199]                   	;----- queue_cmp
[00200]                   	;----- genbrfalse
[00201]                   	;----- genbranch
[00202]                   	;----- cgbrlt
[00203]                   	;----- cglt
[00204] 00ac: d9 c0       	          gosub s_lt16				   ; compare TOS < SOS on Expression Stack
[00205]                   
[00206]                   	;----- cgbrcond
[00207] 00ae: d9 09       	 				 gosub s_dpop16        ; get result from expression stack
[00208] 00b0: 9a          	 				 ghi   ra            ; get MSB from result
[00209] 00b1: 52          	 				 str   r2            ; save in M(X)
[00210] 00b2: 8a          	 				 glo   ra            ; get LSB from result
[00211] 00b3: f1          	 				 or                  ; D = MSB | LSB
[00212] 00b4: ca 00 ba    	lbnz	L11
[00213] 00b7: c0 01 2a    	lbr	L9
[00214]                   
[00215]                   L11:
[00216]                   	;---- queue lbr L8
[00217]                   	;----- cgjump
[00218] 00ba: c0 00 ca    	 				  lbr	L8
[00219]                   
[00220]                   L10:
[00221]                   	;----- cgldlw
[00222] 00bd: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00223] 00bf: ff fe       	          dw  -2  ;--- offset
[00224]                   	;----- cginclw
[00225] 00c1: d9 4e       	          gosub s_linc16       ; increment local variable
[00226] 00c3: ff fe       	          dw  -2  ;--- offset
[00227]                   	;----- cgpopd
[00228] 00c5: d9 09       	          gosub s_dpop16   		 ; get result from expression stack
[00229]                   	;---- queue lbr L7
[00230]                   	;----- cgjump
[00231] 00c7: c0 00 a4    	 				  lbr	L7
[00232]                   
[00233]                   L8:
[00234]                   	;----- begin stmt ------
[00235]                   	;----- begin stmt ------
[00236]                   	;----- cgldlw
[00237] 00ca: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00238] 00cc: ff fe       	          dw  -2  ;--- offset
[00239]                   	;----- cgcall
[00240] 00ce: d4 00 00    	          call  Cfib
[00241]                   	;----- cgstack
[00242] 00d1: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00243] 00d3: 00 02       	          dw  2  ;--- offset
[00244] 00d5: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00245]                   	;---- queue dpush
[00246]                   	;------ commit push
[00247]                   	;----- cgpushd
[00248] 00d8: d9 0c       	          gosub s_dpush16   	 ; put result on expression stack
[00249]                   	;----- cgstorlw
[00250] 00da: d9 3c       	          gosub s_lstor16      ; store value from ES in local variable
[00251] 00dc: ff fc       	          dw  -4  ;--- offset
[00252]                   	;----- cgpopd
[00253] 00de: d9 09       	          gosub s_dpop16   		 ; get result from expression stack
[00254]                   	;----- end stmt ------
[00255]                   	;----- begin stmt ------
[00256]                   	;----- cgldlw
[00257] 00e0: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00258] 00e2: ff fc       	          dw  -4  ;--- offset
[00259]                   	;----- cgldlab
[00260] 00e4: d9 12       	 				gosub s_epush16
[00261] 00e6: 01 61       	 				  dw  L12
[00262]                   	;----- cgcall
[00263] 00e8: d4 00 00    	          call  Cprintf
[00264]                   	;----- cgstack
[00265] 00eb: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00266] 00ed: 00 04       	          dw  4  ;--- offset
[00267] 00ef: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00268]                   	;---- queue dpush
[00269]                   	;----- push + pop data not required, data remains unchanged in RA
[00270]                   	;----- end stmt ------
[00271]                   	;----- begin stmt ------
[00272]                   	;----- begin if
[00273]                   	;----- cglit
[00274] 00f2: d9 12       	 				gosub s_epush16
[00275] 00f4: 00 09       	 				  dw 9
[00276]                   	;----- cgldlw
[00277] 00f6: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00278] 00f8: ff fe       	          dw  -2  ;--- offset
[00279]                   	;----- queue_cmp
[00280]                   	;----- genbrfalse
[00281]                   	;----- genbranch
[00282]                   	;----- cgbreq
[00283]                   	;----- cgeq
[00284] 00fa: d9 b7       	          gosub s_eq16				   ; compare TOS == SOS on Expression Stack
[00285]                   
[00286]                   	;----- cgbrcond
[00287] 00fc: d9 09       	 				 gosub s_dpop16        ; get result from expression stack
[00288] 00fe: 9a          	 				 ghi   ra            ; get MSB from result
[00289] 00ff: 52          	 				 str   r2            ; save in M(X)
[00290] 0100: 8a          	 				 glo   ra            ; get LSB from result
[00291] 0101: f1          	 				 or                  ; D = MSB | LSB
[00292] 0102: ca 01 08    	lbnz	L14
[00293] 0105: c0 01 19    	lbr	L13
[00294]                   
[00295]                   L14:
[00296]                   	;----- begin stmt ------
[00297]                   	;----- cgldlab
[00298] 0108: d9 12       	 				gosub s_epush16
[00299] 010a: 01 64       	 				  dw  L15
[00300]                   	;----- cgcall
[00301] 010c: d4 00 00    	          call  Cprintf
[00302]                   	;----- cgstack
[00303] 010f: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00304] 0111: 00 02       	          dw  2  ;--- offset
[00305] 0113: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00306]                   	;---- queue dpush
[00307]                   	;----- push + pop data not required, data remains unchanged in RA
[00308]                   	;----- end stmt ------
[00309]                   	;---- queue lbr L16
[00310]                   	;----- cgjump
[00311] 0116: c0 01 27    	 				  lbr	L16
[00312]                   
[00313]                   L13:
[00314]                   	;----- begin stmt ------
[00315]                   	;----- cgldlab
[00316] 0119: d9 12       	 				gosub s_epush16
[00317] 011b: 01 66       	 				  dw  L17
[00318]                   	;----- cgcall
[00319] 011d: d4 00 00    	          call  Cprintf
[00320]                   	;----- cgstack
[00321] 0120: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00322] 0122: 00 02       	          dw  2  ;--- offset
[00323] 0124: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00324]                   	;---- queue dpush
[00325]                   	;----- push + pop data not required, data remains unchanged in RA
[00326]                   	;----- end stmt ------
[00327]                   
[00328]                   L16:
[00329]                   	;----- end if
[00330]                   	;----- end stmt ------
[00331]                   	;----- end stmt ------
[00332]                   	;---- queue lbr L10
[00333]                   	;----- cgjump
[00334] 0127: c0 00 bd    	 				  lbr	L10
[00335]                   
[00336]                   L9:
[00337]                   	;----- end for
[00338]                   	;----- end stmt ------
[00339]                   	;----- begin stmt ------
[00340]                   	;----- begin return
[00341]                   	;----- cgldlw
[00342] 012a: d9 42       	          gosub s_lpush16       ; push value of local variable on ES
[00343] 012c: ff fc       	          dw  -4  ;--- offset
[00344]                   	;----- cgpopd
[00345] 012e: d9 09       	          gosub s_dpop16   		 ; get result from expression stack
[00346]                   	;---- queue lbr L5
[00347]                   	;----- end return
[00348]                   	;----- end stmt ------
[00349]                   	;---- lbr L5 falls through
[00350]                   
[00351]                   L5:
[00352]                   	;----- cgstack
[00353] 0130: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00354] 0132: 00 04       	          dw  4  ;--- offset
[00355] 0134: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00356]                   	;----- cgexit
[00357] 0137: e2          	          sex   r2            ; make sure X = SP
[00358] 0138: d9 06       	          gosub s_stkchk      ; check for expression stack creep
[00359] 013a: c3 00 00    	          lbdf  stk_err			 ; exit immediately when stack creep error occurs
[00360] 013d: 60 72 ab f0 	          pop   rb				 		 ; restore BP (base pointer)
              bb 
[00361]                   
[00362] 0142: d5          	          rtn    			 	     ; return to caller
[00363]                   
[00364]                   ;----- string table
[00365]                   
[00366]                   L6:
[00367] 0143: 46 69 72 73   db 'First ten Fibonacci numbers:', 10    ;----- cgdefs
              74 20 74 65 
              6e 20 46 69 
              62 6f 6e 61 
              63 63 69 20 
              6e 75 6d 62 
              65 72 73 3a 
              0a 
[00368] 0160: 00          	db	$00    ;----- cgdefb
[00369]                   
[00370]                   L12:
[00371] 0161: 25 64         db '%d'    ;----- cgdefs
[00372] 0163: 00          	db	$00    ;----- cgdefb
[00373]                   
[00374]                   L15:
[00375] 0164: 0a            db 10    ;----- cgdefs
[00376] 0165: 00          	db	$00    ;----- cgdefb
[00377]                   
[00378]                   L17:
[00379] 0166: 2c 20         db ', '    ;----- cgdefs
[00380] 0168: 00          	db	$00    ;----- cgdefb
[00381]                   	;---- cgpostlude
[00382] 0169:             	             endp
