[00001]                   ; -------------------------------------------------------------------
[00002]                   ; This file generated by ElfC, based on SubC
[00003]                   ; SubC Copyright 2012-2025 by Nils Holm
[00004]                   ; -------------------------------------------------------------------
<00000>                   #include include/ops_c.inc
<00001>                   .op "PUSH","N","9$1 73 8$1 73"
<00002>                   .op "POP","N","60 72 A$1 F0 B$1"
<00003>                   .op "MOV","NR","9$2 B$1 8$2 A$1"
<00004>                   .op "MOV","NW","F8 H2 B$1 F8 L2 A$1"
<00005>                   .op "CALL","W","D4 H1 L1"
<00006>                   .op "RTN","","D5"
<00007>                   .op "CLC","","FC 00"
<00008>                   .op "STC","","FF 00"
<00009>                   .op "COPY","NR","8$1 A$2 9$1 B$2"
<00010>                   .op "LOAD","NW","F8 L2 A$1 F8 H2 B$1"
<00011>                   .op "RETURN","","D5"
<00012>                   .op "MATCH","NW","8$1 FF L2 52 9$1 7F H2 F1"
<00013>                   .op "BRKPT","","79 D1"
<00000>                   #include include/bios.inc
<00001>                   ; *******************************************************************
<00002>                   ; *** This software is copyright 2006 by Michael H Riley          ***
<00003>                   ; *** You have permission to use, modify, copy, and distribute    ***
<00004>                   ; *** this software so long as this copyright notice is retained. ***
<00005>                   ; *** This software may not be used in commercial applications    ***
<00006>                   ; *** without express written permission from the author.         ***
<00007>                   ; *******************************************************************
<00008>                   
<00011>                   #endif
<00012>                   
<00013>                   ; Define address for standard BIOS vectors
<00014>                   #ifndef BIOS
<00015>                   #define BIOS 0ff00h
<00016>                   #endif
<00017>                   
<00018>                   ; Define address for extended BIOS vectors
<00019>                   #ifndef EBIOS
<00020>                   #define EBIOS 0f800h
<00021>                   #endif
<00022>                   
<00023>                   #ifndef _TASM_
<00024> 0000:             scall:      equ  r4                    ; register for SCALL
<00025> 0000:             sret:       equ  r5                    ; register for SRET
<00026>                   
<00027> 0000:             call:       equ  0ffe0h                ; depricated
<00028> 0000:             ret:        equ  0fff1h                ; depricated
<00029>                   #endif
<00030>                   
<00031> 0000:             f_boot:     equ  (BIOS+00h)            ; boot from ide device
<00032> 0000:             f_type:     equ  (BIOS+03h)            ; type 1 character to console
<00033> 0000:             f_read:     equ  (BIOS+06h)            ; read 1 character from console
<00034> 0000:             f_msg:      equ  (BIOS+09h)            ; type asciiz string to console
<00035> 0000:             f_typex:    equ  (BIOS+0ch)            ; depricated, just returns now
<00036> 0000:             f_input:    equ  (BIOS+0fh)            ; read asciiz from console
<00037> 0000:             f_strcmp:   equ  (BIOS+12h)            ; compare 2 strings
<00038> 0000:             f_ltrim:    equ  (BIOS+15h)            ; trim leading spaces
<00039> 0000:             f_strcpy:   equ  (BIOS+18h)            ; copy an asciiz string
<00040> 0000:             f_memcpy:   equ  (BIOS+1bh)            ; copy memory
<00041> 0000:             f_wrtsec:   equ  (BIOS+1eh)            ; write floppy sector (depricated)
<00042> 0000:             f_rdsec:    equ  (BIOS+21h)            ; read floppy sector (depricated)
<00043> 0000:             f_seek0:    equ  (BIOS+24h)            ; floppy seek to track 0 (depricated)
<00044> 0000:             f_seek:     equ  (BIOS+27h)            ; floopy track seek (depricated)
<00045> 0000:             f_drive:    equ  (BIOS+2ah)            ; select floppy drive (depricated)
<00046> 0000:             f_setbd:    equ  (BIOS+2dh)            ; set console baud rate
<00047> 0000:             f_mul16:    equ  (BIOS+30h)            ; 16-bit multiply
<00048> 0000:             f_div16:    equ  (BIOS+33h)            ; 16-bit division
<00049> 0000:             f_idereset: equ  (BIOS+36h)            ; reset ide device
<00050> 0000:             f_idewrite: equ  (BIOS+39h)            ; write ide sector
<00051> 0000:             f_ideread:  equ  (BIOS+3ch)            ; read ide sector
<00052> 0000:             f_initcall: equ  (BIOS+3fh)            ; initialize R4 and R5
<00053> 0000:             f_bootide:  equ  (BIOS+42h)            ; boot from ide device
<00054> 0000:             f_hexin:    equ  (BIOS+45h)            ; convert ascii number to hex
<00055> 0000:             f_hexout2:  equ  (BIOS+48h)            ; convert hex to 2-digit ascii
<00056> 0000:             f_hexout4:  equ  (BIOS+4bh)            ; convert hex to 4-digit ascii
<00057> 0000:             f_tty:      equ  (BIOS+4eh)            ; type character to console
<00058> 0000:             f_mover:    equ  (BIOS+51h)            ; program relocator
<00059> 0000:             f_minimon:  equ  (BIOS+54h)            ; mini monitor
<00060> 0000:             f_freemem:  equ  (BIOS+57h)            ; determine memory size
<00061> 0000:             F_isnum:    equ  (BIOS+5ah)            ; determine if D is numeric
<00062> 0000:             f_atoi:     equ  (BIOS+5dh)            ; convert ascii to integer
<00063> 0000:             f_uintout:  equ  (BIOS+60h)            ; convert unsigned integer to ascii
<00064> 0000:             f_intout:   equ  (BIOS+63h)            ; convert signed integer to ascii
<00065> 0000:             f_inmsg:    equ  (BIOS+66h)            ; type in-line message
<00066> 0000:             f_inputl:   equ  (BIOS+69h)            ; read limited line from console
<00067> 0000:             f_brktest:  equ  (BIOS+6ch)            ; check for serial break
<00068> 0000:             f_findtkn:  equ  (BIOS+6fh)            ; find token in a token table
<00069> 0000:             f_isalpha:  equ  (BIOS+72h)            ; determine if D is alphabetic
<00070> 0000:             f_ishex:    equ  (BIOS+75h)            ; determine if D is hexadecimal
<00071> 0000:             f_isalnum:  equ  (BIOS+78h)            ; determine if D is alpha or numeric
<00072> 0000:             f_idnum:    equ  (BIOS+7bh)            ; determine type of ascii number
<00073> 0000:             f_isterm:   equ  (BIOS+7eh)            ; determine if D is a termination char
<00074> 0000:             f_getdev:   equ  (BIOS+81h)            ; get supported devices
<00075>                   
<00076> 0000:             f_version:  equ  (BIOS+0f9h)           ; 3 bytes holding bios version number
<00077>                   
<00078>                   ; "Extended" BIOS vectors
<00079>                   
<00080> 0000:             f_bread:    equ  (EBIOS+00h)        ; read from onboard serial port
<00081> 0000:             f_btype:    equ  (EBIOS+03h)        ; write to onboard serial port
<00082> 0000:             f_btest:    equ  (EBIOS+06h)        ; test onboard serial port
<00083> 0000:             f_utype:    equ  (EBIOS+09h)        ; write to disk board UART
<00084> 0000:             f_uread:    equ  (EBIOS+0ch)        ; read from disk board UART
<00085> 0000:             f_utest:    equ  (EBIOS+0fh)        ; test disk board UART
<00086> 0000:             f_usetbd:   equ  (EBIOS+12h)        ; set disk board UART baud rate and format
<00087> 0000:             f_gettod:   equ  (EBIOS+15h)        ; read time of day clock
<00088> 0000:             f_settod:   equ  (EBIOS+18h)        ; set time of day clock
<00089> 0000:             f_rdnvr:    equ  (EBIOS+1bh)        ; read non volatile RAM
<00090> 0000:             f_wrnvr:    equ  (EBIOS+1eh)        ; write non volatile RAM
<00091> 0000:             f_idesize:  equ  (EBIOS+21h)        ; return size of attached IDE drive(s)
<00092> 0000:             f_ideid:    equ  (EBIOS+24h)        ; return device data for IDE drive(s)
<00093> 0000:             f_tmtoas:   equ  (EBIOS+2ah)        ; time to ASCII string
<00094> 0000:             f_dttoas:   equ  (EBIOS+27h)        ; date to ASCII string
<00095> 0000:             f_rtctest:  equ  (EBIOS+2dh)        ; test size and presence of RTC/NVR
<00096> 0000:             f_astodt:   equ  (EBIOS+30h)        ; convert ASCII string to date
<00097> 0000:             f_astotm:   equ  (EBIOS+33h)        ; convert ASCII string to time
<00000>                   #include include/kernel.inc
<00001> 0000:             O_CLDBOOT:    equ    0300h             ; jump to cold boot routine
<00002> 0000:             O_WRMBOOT:    equ    0303h             ; jump to warm boot routine
<00003> 0000:             O_OPEN:       equ    0306h             ; open a file
<00004> 0000:             O_READ:       equ    0309h             ; read from file
<00005> 0000:             O_WRITE:      equ    030ch             ; write to file
<00006> 0000:             O_SEEK:       equ    030fh             ; seek to file position
<00007> 0000:             O_CLOSE:      equ    0312h             ; close file
<00008> 0000:             O_OPENDIR:    equ    0315h             ; open dir as a file
<00009> 0000:             O_DELETE:     equ    0318h             ; delete a file
<00010> 0000:             O_RENAME:     equ    031bh             ; rename a file
<00011> 0000:             O_EXEC:       equ    031eh             ; execute an external program
<00012> 0000:             O_MKDIR:      equ    0321h             ; make directory
<00013> 0000:             O_CHDIR:      equ    0324h             ; change directory
<00014> 0000:             O_RMDIR:      equ    0327h             ; remove directory
<00015> 0000:             O_RDLUMP:     equ    032Ah             ; read LAT entry
<00016> 0000:             O_RDLUMP32:   equ    040fh             ; read 32-bit LAT entry
<00017> 0000:             O_WRLUMP:     equ    032Dh             ; write LAT entry
<00018> 0000:             O_WRLUMP32:   equ    0421h             ; write LAT entry
<00019> 0000:             O_TYPE:       equ    0330h             ; passthrough for console output
<00020> 0000:             O_MSG:        equ    0333h             ; passthrough for console output
<00021> 0000:             O_READKEY:    equ    0336h             ; passthrough for console input
<00022> 0000:             O_INPUT:      equ    0339h             ; passthrough for console input
<00023> 0000:             O_PRTSTAT:    equ    033ch             ; printer status
<00024> 0000:             O_PRINT:      equ    033fh             ; output to printer
<00025> 0000:             O_EXECBIN:    equ    0342h             ; execute from default directory
<00026> 0000:             O_SETDEF:     equ    0345h             ; set/get default directory
<00027> 0000:             O_KINIT:      equ    0348h             ; reserved - do not use!!!
<00028> 0000:             O_INMSG:      equ    034bh             ; passthrough for console output
<00029> 0000:             O_GETDEV:     equ    034eh             ; passthrough to f_getdef
<00030> 0000:             O_GETTOD:     equ    0351h             ; passthrough to f_gettod
<00031> 0000:             O_SETTOD:     equ    0354h             ; passthrough to f_settod
<00032> 0000:             O_INPUTL:     equ    0357h             ; passthrough to f_inputl
<00033> 0000:             O_BOOT:       equ    035ah             ; passthrough to f_boot
<00034> 0000:             O_SETBD:      equ    0360h             ; passthrough to f_setbd
<00035> 0000:             O_INITCALL:   equ    0363h             ; passthrough to f_initcall
<00036> 0000:             O_BRKTEST:    equ    0366h             ; passthrough to f_brktest
<00037> 0000:             O_DEVCTRL:    equ    0369h             ; Hook for device control drivers
<00038> 0000:             O_ALLOC:      equ    036ch             ; passthrough to alloc
<00039> 0000:             O_DEALLOC:    equ    036fh             ; passthrough to dealloc
<00040> 0000:             O_TERMCTRL:   equ    0372h             ; Hook for terminal control drivers
<00041> 0000:             O_NBREAD:     equ    0375h             ; passthrough to f_nbread
<00042> 0000:             O_MEMBTRL:    equ    0378h             ; Hook for memory control drivers
<00043> 0000:             O_LMPTOSEC:   equ    0409h             ; convert lump to sector
<00044> 0000:             O_SECTOLMP:   equ    040ch             ; convert sector to lump
<00045> 0000:             O_DIRENT:     equ    037Bh             ; get dirent for a file
<00046> 0000:             O_RELSEC:     equ    0418h             ; find relative sector
<00047> 0000:             O_TRUNC:      equ    046ah             ; Truncate file
<00048> 0000:             O_VIDEO:      equ    0456h             ; video driver hook
<00049> 0000:             D_IDERESET:   equ    0444h             ; passthrough to f_idereset
<00050> 0000:             D_IDEREAD:    equ    0447h             ; passthrough to f_ideread
<00051> 0000:             D_IDEWRITE:   equ    044Ah             ; passthrough to f_idewrite
<00052> 0000:             D_REAPHEAP:   equ    044Dh             ; calls heap reaper to clean non-permanent heap blocks
<00053> 0000:             D_SAVESYS:    equ    0459h             ; save system sector
<00054> 0000:             D_DELCHAIN:   equ    0453h             ; delete an AU chain
<00055> 0000:             D_ALLOCAU:    equ    045eh             ; allocate an AU
<00056> 0000:             D_FREEDIRENT: equ    046dh             ; allocate a DIRENT
<00057> 0000:             I_SERVE:      equ    03f6h             ; address of interrupt chain head
<00058> 0000:             V_IVEC:       equ    03fdh             ; interrupt head
<00059> 0000:             V_DVEC:       equ    036ah             ; device head
<00060> 0000:             K_SYS_DTA:    equ    0100h             ; system sector DTA
<00061> 0000:             K_VER:        equ    0400h             ; kernel version number
<00062> 0000:             K_BUILD:      equ    0403h             ; kernel build number
<00063> 0000:             K_BMONTH:     equ    0405h             ; kernel build month
<00064> 0000:             K_BDAY:       equ    0406h             ; kernel build day
<00065> 0000:             K_BYEAR:      equ    0407h             ; kernel build month
<00066> 0000:             K_LASTSEC:    equ    042bh             ; sector currently in sys DTA
<00067> 0000:             K_CWD_LUMP:   equ    0436h             ; lump for current directory
<00068> 0000:             K_EXEC_AU:    equ    043Eh             ; executable starting AU
<00069> 0000:             K_HIMEM:      equ    0442h             ; high memory pointer
<00070> 0000:             K_LOWMEM:     equ    0465h             ; lowest memory heap can use
<00071> 0000:             K_RETVAL:     equ    0467h             ; D on program exit
<00072> 0000:             K_HEAP:       equ    0468h             ; heap pointer
<00073> 0000:             K_CLKFREQ:    equ    0470h             ; system clock frequency
<00074> 0000:             K_MONTH:      equ    0475h             ; date/time
<00075> 0000:             K_DAY:        equ    0476h
<00076> 0000:             K_YEAR:       equ    0477h
<00077> 0000:             K_HOUR:       equ    0478h
<00078> 0000:             K_MINUTE:     equ    0479h
<00079> 0000:             K_SECOND:     equ    047ah
<00080> 0000:             K_SECDEN:     equ    047bh
<00081> 0000:             K_SECNUM:     equ    047dh
<00082>                   
<00083>                   
<00000>                   #include include/elfc.inc
<00001>                   ;-------------------------------------------------------------------------------
<00002>                   ; elfc - a library for basic c language functions
<00003>                   ;-------------------------------------------------------------------------------
<00004> 0000:                       extrn   epush16
<00005> 0000:                       extrn   epush8
<00006> 0000:                       extrn   dpop16
<00007> 0000:                       extrn   abs16
<00008> 0000:                       extrn   add16
<00009> 0000:                       extrn   and16
<00010> 0000:                       extrn   atoi16
<00011> 0000:                       extrn   div16
<00012> 0000:                       extrn   eq16
<00013> 0000:                     	extrn   false16
<00014> 0000:                     	extrn   gt16
<00015> 0000:                     	extrn   gte16
<00016> 0000:                     	extrn   itoa16
<00017> 0000:                     	extrn   lfsrshift
<00018> 0000:                     	extrn   lt16
<00019> 0000:                     	extrn   lte16
<00020> 0000:                     	extrn   mdnorm16
<00021> 0000:                     	extrn   mod16
<00022> 0000:                     	extrn   mul16
<00023> 0000:                     	extrn   ne16
<00024> 0000:                     	extrn   neg16
<00025> 0000:                     	extrn   or16
<00026> 0000:                     	extrn   rnd16
<00027> 0000:                     	extrn   sgn16
<00028> 0000:                     	extrn   sub16
<00029> 0000:                     	extrn   tobcd16
<00030> 0000:                     	extrn   true16
<00031> 0000:                     	extrn   xor16
<00032> 0000:                       extrn   not16
<00033> 0000:                       extrn   bool16
<00034> 0000:                       extrn   inv16
<00035> 0000:                       extrn   shl16
<00036> 0000:                       extrn   shr16
<00037> 0000:                       extrn   vpush16
<00038> 0000:                       extrn   vpop16
<00039> 0000:                       extrn   vpush8
<00040> 0000:                       extrn   dpush16
<00041> 0000:                       extrn   dpush8
<00042> 0000:                       extrn   esmove
<00043> 0000:                       extrn   linit16
<00044> 0000:                       extrn   lstor16
<00045> 0000:                       extrn   lstor8
<00046> 0000:                       extrn   vstor16
<00047> 0000:                       extrn   vstor8
<00048> 0000:                       extrn   swap16
<00049> 0000:                       extrn   dget16
<00050> 0000:                       extrn   lpush16
<00051> 0000:                       extrn   lpush8
<00052> 0000:                       extrn   deref16
<00053> 0000:                       extrn   deref8
<00054> 0000:                       extrn   laddr16
<00055> 0000:                       extrn   pstor16
<00056> 0000:                       extrn   pstor8
<00057> 0000:                       extrn   scltos2
<00058> 0000:                       extrn   sclsos2
<00059> 0000:                       extrn   unscl2
<00060> 0000:                       extrn   vinc16
<00061> 0000:                       extrn   vdec16
<00062> 0000:                       extrn   vinc8
<00063> 0000:                       extrn   vdec8
<00064> 0000:                       extrn   linc16
<00065> 0000:                       extrn   ldec16
<00066> 0000:                       extrn   linc8
<00067> 0000:                       extrn   ldec8
<00068> 0000:                       extrn   lpinc16
<00069> 0000:                       extrn   lpdec16
<00070> 0000:                       extrn   vpinc16
<00071> 0000:                       extrn   vpdec16
<00072> 0000:                       extrn   psave
<00073> 0000:                       extrn   pinc16
<00074> 0000:                       extrn   pdec16
<00075> 0000:                       extrn   pinc8
<00076> 0000:                       extrn   pdec8
<00077> 0000:                       extrn   pincptr
<00078> 0000:                       extrn   pdecptr
<00079> 0000:                       extrn   escheck
<00080> 0000:                       extrn   ugt16
<00081> 0000:                     	extrn   uge16
<00082> 0000:                       extrn   ult16
<00083> 0000:                     	extrn   ule16
<00084> 0000:                       extrn   scltos4
<00085> 0000:                       extrn   sclsos4
<00086> 0000:                       extrn   unscl4
<00087> 0000:                       extrn   lget16
<00088> 0000:                       extrn   lget8
<00089> 0000:                       extrn   lset16
<00090>                   
<00091>                   ;-------------------------------------------------------------------------------
<00092>                   ; crt0 - Elf/OS c start-up library
<00093>                   ;-------------------------------------------------------------------------------
<00094> 0000:                       extrn   auto_err
[00009]                   
[00010] 0000:             	           proc printfmt
[00011]                   
[00012] 0000:                         extrn C_init
[00013]                   
[00014] 0000:                         extrn C_fdinit
[00015]                   
[00016] 0000:                         extrn C_fdtable
[00017]                   
[00018] 0000:                         extrn C_fildes
[00019]                   
[00020] 0000:                         extrn Cabort
[00021]                   
[00022] 0000:                         extrn Cabs
[00023]                   
[00024] 0000:                         extrn Catexit
[00025]                   
[00026] 0000:                         extrn Cexit
[00027]                   
[00028] 0000:                         extrn Cmalloc
[00029]                   
[00030] 0000:                         extrn Ccalloc
[00031]                   
[00032] 0000:                         extrn Crealloc
[00033]                   
[00034] 0000:                         extrn Cfree
[00035]                   
[00036] 0000:                         extrn Catoi
[00037]                   
[00038] 0000:                         extrn Citoa
[00039]                   
[00040] 0000:                         extrn Citox
[00041]                   
[00042] 0000:                         extrn Citou
[00043]                   
[00044] 0000:                         extrn Cdiv
[00045]                   
[00046] 0000:                         extrn Cbsearch
[00047]                   
[00048] 0000:                         extrn Cqsort
[00049]                   
[00050] 0000:                         extrn Crand
[00051]                   
[00052] 0000:                         extrn Csrand
[00053]                   
[00054] 0000:                         extrn Ccreat
[00055]                   
[00056] 0000:                         extrn Copen
[00057]                   
[00058] 0000:                         extrn Cclose
[00059]                   
[00060] 0000:                         extrn Cread
[00061]                   
[00062] 0000:                         extrn Cwrite
[00063]                   
[00064] 0000:                         extrn Clseek
[00065]                   
[00066] 0000:                         extrn Cunlink
[00067]                   
[00068] 0000:                         extrn Crename
[00069]                   
[00070] 0000:                         extrn Cmin
[00071]                   
[00072] 0000:                         extrn Cmax
[00073]                   
[00074] 0000:                         extrn Cstdin
[00075]                   
[00076] 0000:                         extrn Cstdout
[00077]                   
[00078] 0000:                         extrn Cstderr
[00079]                   
[00080] 0000:                         extrn Cputs
[00081]                   
[00082] 0000:                         extrn Cputstr
[00083]                   
[00084] 0000:                         extrn Cgets
[00085]                   
[00086] 0000:                         extrn Cputch
[00087]                   
[00088] 0000:                         extrn Cgetch
[00089]                   
[00090] 0000:                         extrn Cputchar
[00091]                   
[00092] 0000:                         extrn Cgetchar
[00093]                   
[00094] 0000:                         extrn Cfdopen
[00095]                   
[00096] 0000:                         extrn Cfclose
[00097]                   
[00098] 0000:                         extrn Cfopen
[00099]                   
[00100] 0000:                         extrn Cferror
[00101]                   
[00102] 0000:                         extrn Cfeof
[00103]                   
[00104] 0000:                         extrn Cclearerr
[00105]                   
[00106] 0000:                         extrn Cfgetc
[00107]                   
[00108] 0000:                         extrn Cfputc
[00109]                   
[00110] 0000:                         extrn Cfgets
[00111]                   
[00112] 0000:                         extrn Cfputs
[00113]                   
[00114] 0000:                         extrn Cungetc
[00115]                   
[00116] 0000:                         extrn Cfread
[00117]                   
[00118] 0000:                         extrn Cfwrite
[00119]                   
[00120] 0000:                         extrn Cfflush
[00121]                   
[00122] 0000:                         extrn Cfprintf
[00123]                   
[00124] 0000:                         extrn Ckprintf
[00125]                   
[00126] 0000:                         extrn Cprintf
[00127]                   
[00128] 0000:                         extrn Csprintf
[00129]                   
[00130] 0000:                         extrn Cvfprintf
[00131]                   
[00132] 0000:                         extrn Cvprintf
[00133]                   
[00134] 0000:                         extrn Cvsprintf
[00135]                   
[00136] 0000:                         extrn Cfscanf
[00137]                   
[00138] 0000:                         extrn Cscanf
[00139]                   
[00140] 0000:                         extrn Csscanf
[00141]                   
[00142] 0000:                         extrn Cfgetpos
[00143]                   
[00144] 0000:                         extrn Cfsetpos
[00145]                   
[00146] 0000:                         extrn Cfseek
[00147]                   
[00148] 0000:                         extrn Cftell
[00149]                   
[00150] 0000:                         extrn Cperror
[00151]                   
[00152] 0000:                         extrn Crewind
[00153]                   
[00154] 0000:                         extrn Cremove
[00155]                   
[00156] 0000:                         extrn Ctmpnam
[00157]                   
[00158] 0000:                         extrn Ctmpfile
[00159]                   
[00160] 0000:                         extrn Cfileno
[00161]                   	;----- cgpublic
[00162] 0000:             	              public Ci
[00163] 0000: 32 00       Ci:	db	$32, $00  ;----- cgdefw LSB first, MSB second
[00164]                   	;----- cgpublic
[00165] 0002:             	              public Cj
[00166] 0002: d4 fe       Cj:	db	$d4, $fe  ;----- cgdefw LSB first, MSB second
[00167] 0004: 73 74 72 69 Cstr:  db 'string'    ;----- cgdefs
              6e 67 
[00168] 000a: 00          	db	$00    ;----- cgdefb
[00169]                   	;----- cgpublic
[00170] 000b:             	              public Cstr
[00171]                   	;----- cgpublic
[00172] 000b:             	              public Cmain
[00173]                   Cmain:
[00174]                     ;----- cgsetup
[00177]                   #endif
[00178]                   	;---- cgentry
[00179] 000b: e2          	          sex   r2   				 ; make sure X = SP
[00180] 000c: 9b 73 8b 73 	          push  rb				 		 ; save current BP (base pointer)
[00181] 0010: 87 ab 97 bb 	          copy  r7, rb			 	 ; set BP to current ES location
[00182]                   	;----- begin stmt ------
[00183]                   	;---- queue lbr L3
[00184]                   	;----- cgjump
[00185] 0014: c0 00 25    	 				  lbr	L3
[00186]                   
[00187]                   L2:
[00188] 0017: 49 6e 74 20   db 'Int formats:', 10    ;----- cgdefs
              66 6f 72 6d 
              61 74 73 3a 
              0a 
[00189] 0024: 00          	db	$00    ;----- cgdefb
[00190]                   
[00191]                   L3:
[00192]                   	;----- cgldlab
[00193] 0025: d4 00 00    	 				call epush16
[00194] 0028: 00 17       	 				  dw  L2
[00195]                   	;----- cgcall
[00196] 002a: d4 00 00    	          call  Cprintf
[00197]                   	;----- cgstack
[00198] 002d: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00199] 0030: 00 02       	          dw  2  ;--- offset
[00200] 0032: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00201]                   	;---- queue dpush
[00202]                   	;----- push + pop data not required, data remains unchanged in RA
[00203]                   	;----- end stmt ------
[00204]                   	;----- begin stmt ------
[00205]                   	;---- queue lbr L5
[00206]                   	;----- cgjump
[00207] 0035: c0 00 48    	 				  lbr	L5
[00208]                   
[00209]                   L4:
[00210] 0038: 70 6c 61 69   db 'plain: _%d_%d_', 10    ;----- cgdefs
              6e 3a 20 5f 
              25 64 5f 25 
              64 5f 0a 
[00211] 0047: 00          	db	$00    ;----- cgdefb
[00212]                   
[00213]                   L5:
[00214]                   	;----- cgldgw
[00215] 0048: d4 00 00    	 				call vpush16
[00216] 004b: 00 02       	 				  dw Cj
[00217]                   	;----- cgldgw
[00218] 004d: d4 00 00    	 				call vpush16
[00219] 0050: 00 00       	 				  dw Ci
[00220]                   	;----- cgldlab
[00221] 0052: d4 00 00    	 				call epush16
[00222] 0055: 00 38       	 				  dw  L4
[00223]                   	;----- cgcall
[00224] 0057: d4 00 00    	          call  Cprintf
[00225]                   	;----- cgstack
[00226] 005a: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00227] 005d: 00 06       	          dw  6  ;--- offset
[00228] 005f: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00229]                   	;---- queue dpush
[00230]                   	;----- push + pop data not required, data remains unchanged in RA
[00231]                   	;----- end stmt ------
[00232]                   	;----- begin stmt ------
[00233]                   	;---- queue lbr L7
[00234]                   	;----- cgjump
[00235] 0062: c0 00 78    	 				  lbr	L7
[00236]                   
[00237]                   L6:
[00238] 0065: 2b 20 66 6c   db '+ flag: _%+d_%+d_', 10    ;----- cgdefs
              61 67 3a 20 
              5f 25 2b 64 
              5f 25 2b 64 
              5f 0a 
[00239] 0077: 00          	db	$00    ;----- cgdefb
[00240]                   
[00241]                   L7:
[00242]                   	;----- cgldgw
[00243] 0078: d4 00 00    	 				call vpush16
[00244] 007b: 00 02       	 				  dw Cj
[00245]                   	;----- cgldgw
[00246] 007d: d4 00 00    	 				call vpush16
[00247] 0080: 00 00       	 				  dw Ci
[00248]                   	;----- cgldlab
[00249] 0082: d4 00 00    	 				call epush16
[00250] 0085: 00 65       	 				  dw  L6
[00251]                   	;----- cgcall
[00252] 0087: d4 00 00    	          call  Cprintf
[00253]                   	;----- cgstack
[00254] 008a: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00255] 008d: 00 06       	          dw  6  ;--- offset
[00256] 008f: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00257]                   	;---- queue dpush
[00258]                   	;----- push + pop data not required, data remains unchanged in RA
[00259]                   	;----- end stmt ------
[00260]                   	;----- begin stmt ------
[00261]                   	;---- queue lbr L9
[00262]                   	;----- cgjump
[00263] 0092: c0 00 a8    	 				  lbr	L9
[00264]                   
[00265]                   L8:
[00266] 0095: 73 69 7a 65   db 'size 4: _%4d_%4d_', 10    ;----- cgdefs
              20 34 3a 20 
              5f 25 34 64 
              5f 25 34 64 
              5f 0a 
[00267] 00a7: 00          	db	$00    ;----- cgdefb
[00268]                   
[00269]                   L9:
[00270]                   	;----- cgldgw
[00271] 00a8: d4 00 00    	 				call vpush16
[00272] 00ab: 00 02       	 				  dw Cj
[00273]                   	;----- cgldgw
[00274] 00ad: d4 00 00    	 				call vpush16
[00275] 00b0: 00 00       	 				  dw Ci
[00276]                   	;----- cgldlab
[00277] 00b2: d4 00 00    	 				call epush16
[00278] 00b5: 00 95       	 				  dw  L8
[00279]                   	;----- cgcall
[00280] 00b7: d4 00 00    	          call  Cprintf
[00281]                   	;----- cgstack
[00282] 00ba: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00283] 00bd: 00 06       	          dw  6  ;--- offset
[00284] 00bf: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00285]                   	;---- queue dpush
[00286]                   	;----- push + pop data not required, data remains unchanged in RA
[00287]                   	;----- end stmt ------
[00288]                   	;----- begin stmt ------
[00289]                   	;---- queue lbr L11
[00290]                   	;----- cgjump
[00291] 00c2: c0 00 db    	 				  lbr	L11
[00292]                   
[00293]                   L10:
[00294] 00c5: 30 34 20 66   db '04 flag: _%04d_%04d_', 10    ;----- cgdefs
              6c 61 67 3a 
              20 5f 25 30 
              34 64 5f 25 
              30 34 64 5f 
              0a 
[00295] 00da: 00          	db	$00    ;----- cgdefb
[00296]                   
[00297]                   L11:
[00298]                   	;----- cgldgw
[00299] 00db: d4 00 00    	 				call vpush16
[00300] 00de: 00 02       	 				  dw Cj
[00301]                   	;----- cgldgw
[00302] 00e0: d4 00 00    	 				call vpush16
[00303] 00e3: 00 00       	 				  dw Ci
[00304]                   	;----- cgldlab
[00305] 00e5: d4 00 00    	 				call epush16
[00306] 00e8: 00 c5       	 				  dw  L10
[00307]                   	;----- cgcall
[00308] 00ea: d4 00 00    	          call  Cprintf
[00309]                   	;----- cgstack
[00310] 00ed: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00311] 00f0: 00 06       	          dw  6  ;--- offset
[00312] 00f2: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00313]                   	;---- queue dpush
[00314]                   	;----- push + pop data not required, data remains unchanged in RA
[00315]                   	;----- end stmt ------
[00316]                   	;----- begin stmt ------
[00317]                   	;---- queue lbr L13
[00318]                   	;----- cgjump
[00319] 00f5: c0 01 0e    	 				  lbr	L13
[00320]                   
[00321]                   L12:
[00322] 00f8: 2d 34 20 66   db '-4 flag: _%-4d_%-4d_', 10    ;----- cgdefs
              6c 61 67 3a 
              20 5f 25 2d 
              34 64 5f 25 
              2d 34 64 5f 
              0a 
[00323] 010d: 00          	db	$00    ;----- cgdefb
[00324]                   
[00325]                   L13:
[00326]                   	;----- cgldgw
[00327] 010e: d4 00 00    	 				call vpush16
[00328] 0111: 00 02       	 				  dw Cj
[00329]                   	;----- cgldgw
[00330] 0113: d4 00 00    	 				call vpush16
[00331] 0116: 00 00       	 				  dw Ci
[00332]                   	;----- cgldlab
[00333] 0118: d4 00 00    	 				call epush16
[00334] 011b: 00 f8       	 				  dw  L12
[00335]                   	;----- cgcall
[00336] 011d: d4 00 00    	          call  Cprintf
[00337]                   	;----- cgstack
[00338] 0120: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00339] 0123: 00 06       	          dw  6  ;--- offset
[00340] 0125: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00341]                   	;---- queue dpush
[00342]                   	;----- push + pop data not required, data remains unchanged in RA
[00343]                   	;----- end stmt ------
[00344]                   	;----- begin stmt ------
[00345]                   	;---- queue lbr L15
[00346]                   	;----- cgjump
[00347] 0128: c0 01 41    	 				  lbr	L15
[00348]                   
[00349]                   L14:
[00350] 012b: 20 34 20 66   db ' 4 flag: _% 4d_% 4d_', 10    ;----- cgdefs
              6c 61 67 3a 
              20 5f 25 20 
              34 64 5f 25 
              20 34 64 5f 
              0a 
[00351] 0140: 00          	db	$00    ;----- cgdefb
[00352]                   
[00353]                   L15:
[00354]                   	;----- cgldgw
[00355] 0141: d4 00 00    	 				call vpush16
[00356] 0144: 00 02       	 				  dw Cj
[00357]                   	;----- cgldgw
[00358] 0146: d4 00 00    	 				call vpush16
[00359] 0149: 00 00       	 				  dw Ci
[00360]                   	;----- cgldlab
[00361] 014b: d4 00 00    	 				call epush16
[00362] 014e: 01 2b       	 				  dw  L14
[00363]                   	;----- cgcall
[00364] 0150: d4 00 00    	          call  Cprintf
[00365]                   	;----- cgstack
[00366] 0153: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00367] 0156: 00 06       	          dw  6  ;--- offset
[00368] 0158: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00369]                   	;---- queue dpush
[00370]                   	;----- push + pop data not required, data remains unchanged in RA
[00371]                   	;----- end stmt ------
[00372]                   	;----- begin stmt ------
[00373]                   	;---- queue lbr L17
[00374]                   	;----- cgjump
[00375] 015b: c0 01 72    	 				  lbr	L17
[00376]                   
[00377]                   L16:
[00378] 015e: 2b 30 34 3a   db '+04: _%+04d_%+04d_', 10    ;----- cgdefs
              20 5f 25 2b 
              30 34 64 5f 
              25 2b 30 34 
              64 5f 0a 
[00379] 0171: 00          	db	$00    ;----- cgdefb
[00380]                   
[00381]                   L17:
[00382]                   	;----- cgldgw
[00383] 0172: d4 00 00    	 				call vpush16
[00384] 0175: 00 02       	 				  dw Cj
[00385]                   	;----- cgldgw
[00386] 0177: d4 00 00    	 				call vpush16
[00387] 017a: 00 00       	 				  dw Ci
[00388]                   	;----- cgldlab
[00389] 017c: d4 00 00    	 				call epush16
[00390] 017f: 01 5e       	 				  dw  L16
[00391]                   	;----- cgcall
[00392] 0181: d4 00 00    	          call  Cprintf
[00393]                   	;----- cgstack
[00394] 0184: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00395] 0187: 00 06       	          dw  6  ;--- offset
[00396] 0189: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00397]                   	;---- queue dpush
[00398]                   	;----- push + pop data not required, data remains unchanged in RA
[00399]                   	;----- end stmt ------
[00400]                   	;----- begin stmt ------
[00401]                   	;---- queue lbr L19
[00402]                   	;----- cgjump
[00403] 018c: c0 01 9d    	 				  lbr	L19
[00404]                   
[00405]                   L18:
[00406] 018f: 49 6e 74 20   db 'Int 06:%06i!', 10    ;----- cgdefs
              30 36 3a 25 
              30 36 69 21 
              0a 
[00407] 019c: 00          	db	$00    ;----- cgdefb
[00408]                   
[00409]                   L19:
[00410]                   	;----- cglit
[00411] 019d: d4 00 00    	 				call epush16
[00412] 01a0: 00 03       	 				  dw 3
[00413]                   	;----- cgldlab
[00414] 01a2: d4 00 00    	 				call epush16
[00415] 01a5: 01 8f       	 				  dw  L18
[00416]                   	;----- cgcall
[00417] 01a7: d4 00 00    	          call  Cprintf
[00418]                   	;----- cgstack
[00419] 01aa: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00420] 01ad: 00 04       	          dw  4  ;--- offset
[00421] 01af: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00422]                   	;---- queue dpush
[00423]                   	;----- push + pop data not required, data remains unchanged in RA
[00424]                   	;----- end stmt ------
[00425]                   	;----- begin stmt ------
[00426]                   	;---- queue lbr L21
[00427]                   	;----- cgjump
[00428] 01b2: c0 01 cf    	 				  lbr	L21
[00429]                   
[00430]                   L20:
[00431] 01b5: 50 6f 69 6e   db 'Pointer %p and string %s', 10    ;----- cgdefs
              74 65 72 20 
              25 70 20 61 
              6e 64 20 73 
              74 72 69 6e 
              67 20 25 73 
              0a 
[00432] 01ce: 00          	db	$00    ;----- cgdefb
[00433]                   
[00434]                   L21:
[00435]                   	;----- cgldga
[00436] 01cf: d4 00 00    	 				call epush16
[00437] 01d2: 00 04       	 				  dw Cstr
[00438]                   	;----- cgldga
[00439] 01d4: d4 00 00    	 				call epush16
[00440] 01d7: 00 04       	 				  dw Cstr
[00441]                   	;----- cgldlab
[00442] 01d9: d4 00 00    	 				call epush16
[00443] 01dc: 01 b5       	 				  dw  L20
[00444]                   	;----- cgcall
[00445] 01de: d4 00 00    	          call  Cprintf
[00446]                   	;----- cgstack
[00447] 01e1: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00448] 01e4: 00 06       	          dw  6  ;--- offset
[00449] 01e6: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00450]                   	;---- queue dpush
[00451]                   	;----- push + pop data not required, data remains unchanged in RA
[00452]                   	;----- end stmt ------
[00453]                   	;----- begin stmt ------
[00454]                   	;---- queue lbr L23
[00455]                   	;----- cgjump
[00456] 01e9: c0 01 fd    	 				  lbr	L23
[00457]                   
[00458]                   L22:
[00459] 01ec: 43 68 61 72   db 'Character %c %c', 10    ;----- cgdefs
              61 63 74 65 
              72 20 25 63 
              20 25 63 0a 
[00460] 01fc: 00          	db	$00    ;----- cgdefb
[00461]                   
[00462]                   L23:
[00463]                   	;----- cgldga
[00464] 01fd: d4 00 00    	 				call epush16
[00465] 0200: 00 04       	 				  dw Cstr
[00466]                   	;----- cgindb
[00467] 0202: d4 00 00    	 				call deref8
[00468]                   	;----- cglit
[00469] 0205: d4 00 00    	 				call epush16
[00470] 0208: 00 71       	 				  dw 113
[00471]                   	;----- cgldlab
[00472] 020a: d4 00 00    	 				call epush16
[00473] 020d: 01 ec       	 				  dw  L22
[00474]                   	;----- cgcall
[00475] 020f: d4 00 00    	          call  Cprintf
[00476]                   	;----- cgstack
[00477] 0212: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00478] 0215: 00 06       	          dw  6  ;--- offset
[00479] 0217: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00480]                   	;---- queue dpush
[00481]                   	;----- push + pop data not required, data remains unchanged in RA
[00482]                   	;----- end stmt ------
[00483]                   	;----- begin stmt ------
[00484]                   	;---- queue lbr L25
[00485]                   	;----- cgjump
[00486] 021a: c0 02 28    	 				  lbr	L25
[00487]                   
[00488]                   L24:
[00489] 021d: 48 65 78 20   db 'Hex %x %X', 10    ;----- cgdefs
              25 78 20 25 
              58 0a 
[00490] 0227: 00          	db	$00    ;----- cgdefb
[00491]                   
[00492]                   L25:
[00493]                   	;----- cgldgw
[00494] 0228: d4 00 00    	 				call vpush16
[00495] 022b: 00 02       	 				  dw Cj
[00496]                   	;----- cgldgw
[00497] 022d: d4 00 00    	 				call vpush16
[00498] 0230: 00 00       	 				  dw Ci
[00499]                   	;----- cgldlab
[00500] 0232: d4 00 00    	 				call epush16
[00501] 0235: 02 1d       	 				  dw  L24
[00502]                   	;----- cgcall
[00503] 0237: d4 00 00    	          call  Cprintf
[00504]                   	;----- cgstack
[00505] 023a: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00506] 023d: 00 06       	          dw  6  ;--- offset
[00507] 023f: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00508]                   	;---- queue dpush
[00509]                   	;----- push + pop data not required, data remains unchanged in RA
[00510]                   	;----- end stmt ------
[00511]                   	;----- begin stmt ------
[00512]                   	;---- queue lbr L27
[00513]                   	;----- cgjump
[00514] 0242: c0 02 57    	 				  lbr	L27
[00515]                   
[00516]                   L26:
[00517] 0245: 41 6c 74 20   db 'Alt Hex: %#x %#X', 10    ;----- cgdefs
              48 65 78 3a 
              20 25 23 78 
              20 25 23 58 
              0a 
[00518] 0256: 00          	db	$00    ;----- cgdefb
[00519]                   
[00520]                   L27:
[00521]                   	;----- cgldgw
[00522] 0257: d4 00 00    	 				call vpush16
[00523] 025a: 00 02       	 				  dw Cj
[00524]                   	;----- cgldgw
[00525] 025c: d4 00 00    	 				call vpush16
[00526] 025f: 00 00       	 				  dw Ci
[00527]                   	;----- cgldlab
[00528] 0261: d4 00 00    	 				call epush16
[00529] 0264: 02 45       	 				  dw  L26
[00530]                   	;----- cgcall
[00531] 0266: d4 00 00    	          call  Cprintf
[00532]                   	;----- cgstack
[00533] 0269: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00534] 026c: 00 06       	          dw  6  ;--- offset
[00535] 026e: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00536]                   	;---- queue dpush
[00537]                   	;----- push + pop data not required, data remains unchanged in RA
[00538]                   	;----- end stmt ------
[00539]                   	;----- begin stmt ------
[00540]                   	;---- queue lbr L29
[00541]                   	;----- cgjump
[00542] 0271: c0 02 81    	 				  lbr	L29
[00543]                   
[00544]                   L28:
[00545] 0274: 4f 63 74 61   db 'Octal %o %o', 10    ;----- cgdefs
              6c 20 25 6f 
              20 25 6f 0a 
[00546] 0280: 00          	db	$00    ;----- cgdefb
[00547]                   
[00548]                   L29:
[00549]                   	;----- cgldgw
[00550] 0281: d4 00 00    	 				call vpush16
[00551] 0284: 00 02       	 				  dw Cj
[00552]                   	;----- cgldgw
[00553] 0286: d4 00 00    	 				call vpush16
[00554] 0289: 00 00       	 				  dw Ci
[00555]                   	;----- cgldlab
[00556] 028b: d4 00 00    	 				call epush16
[00557] 028e: 02 74       	 				  dw  L28
[00558]                   	;----- cgcall
[00559] 0290: d4 00 00    	          call  Cprintf
[00560]                   	;----- cgstack
[00561] 0293: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00562] 0296: 00 06       	          dw  6  ;--- offset
[00563] 0298: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00564]                   	;---- queue dpush
[00565]                   	;----- push + pop data not required, data remains unchanged in RA
[00566]                   	;----- end stmt ------
[00567]                   	;----- begin stmt ------
[00568]                   	;---- queue lbr L31
[00569]                   	;----- cgjump
[00570] 029b: c0 02 b1    	 				  lbr	L31
[00571]                   
[00572]                   L30:
[00573] 029e: 41 6c 74 20   db 'Alt Octal %#o %#o', 10    ;----- cgdefs
              4f 63 74 61 
              6c 20 25 23 
              6f 20 25 23 
              6f 0a 
[00574] 02b0: 00          	db	$00    ;----- cgdefb
[00575]                   
[00576]                   L31:
[00577]                   	;----- cgldgw
[00578] 02b1: d4 00 00    	 				call vpush16
[00579] 02b4: 00 02       	 				  dw Cj
[00580]                   	;----- cgldgw
[00581] 02b6: d4 00 00    	 				call vpush16
[00582] 02b9: 00 00       	 				  dw Ci
[00583]                   	;----- cgldlab
[00584] 02bb: d4 00 00    	 				call epush16
[00585] 02be: 02 9e       	 				  dw  L30
[00586]                   	;----- cgcall
[00587] 02c0: d4 00 00    	          call  Cprintf
[00588]                   	;----- cgstack
[00589] 02c3: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00590] 02c6: 00 06       	          dw  6  ;--- offset
[00591] 02c8: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00592]                   	;---- queue dpush
[00593]                   	;----- push + pop data not required, data remains unchanged in RA
[00594]                   	;----- end stmt ------
[00595]                   	;----- begin stmt ------
[00596]                   	;---- queue lbr L33
[00597]                   	;----- cgjump
[00598] 02cb: c0 02 f4    	 				  lbr	L33
[00599]                   
[00600]                   L32:
[00601] 02ce: 4e 75 6d 62   db 'Number characters written so far: %n', 10    ;----- cgdefs
              65 72 20 63 
              68 61 72 61 
              63 74 65 72 
              73 20 77 72 
              69 74 74 65 
              6e 20 73 6f 
              20 66 61 72 
              3a 20 25 6e 
              0a 
[00602] 02f3: 00          	db	$00    ;----- cgdefb
[00603]                   
[00604]                   L33:
[00605]                   	;----- cgldlab
[00606] 02f4: d4 00 00    	 				call epush16
[00607] 02f7: 02 ce       	 				  dw  L32
[00608]                   	;----- cgcall
[00609] 02f9: d4 00 00    	          call  Cprintf
[00610]                   	;----- cgstack
[00611] 02fc: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00612] 02ff: 00 02       	          dw  2  ;--- offset
[00613] 0301: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00614]                   	;---- queue dpush
[00615]                   	;----- push + pop data not required, data remains unchanged in RA
[00616]                   	;----- end stmt ------
[00617]                   	;----- begin stmt ------
[00618]                   	;---- queue lbr L35
[00619]                   	;----- cgjump
[00620] 0304: c0 03 1b    	 				  lbr	L35
[00621]                   
[00622]                   L34:
[00623] 0307: 45 73 63 61   db 'Escape for %% sign', 10    ;----- cgdefs
              70 65 20 66 
              6f 72 20 25 
              25 20 73 69 
              67 6e 0a 
[00624] 031a: 00          	db	$00    ;----- cgdefb
[00625]                   
[00626]                   L35:
[00627]                   	;----- cgldlab
[00628] 031b: d4 00 00    	 				call epush16
[00629] 031e: 03 07       	 				  dw  L34
[00630]                   	;----- cgcall
[00631] 0320: d4 00 00    	          call  Cprintf
[00632]                   	;----- cgstack
[00633] 0323: d4 00 00    	          call  esmove				 ; move pointer for Expression Stack
[00634] 0326: 00 02       	          dw  2  ;--- offset
[00635] 0328: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00636]                   	;---- queue dpush
[00637]                   	;----- push + pop data not required, data remains unchanged in RA
[00638]                   	;----- end stmt ------
[00639]                   
[00640]                   L1:
[00641]                   	;----- cgexit
[00642] 032b: e2          	          sex   r2            ; make sure X = SP
[00643] 032c: d4 00 00    	          call  escheck       ; check for expression stack creep
[00644] 032f: 60 72 ab f0 	          pop   rb				 		 ; restore BP (base pointer)
              bb 
[00645]                   
[00646] 0334: d5          	          rtn	  			 	     ; return to caller
[00647]                   	;---- cgpostlude
[00648] 0335:             	             endp
