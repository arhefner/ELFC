[00001]                   ; -------------------------------------------------------------------
[00002]                   ; This file generated by ElfC, based on SubC
[00003]                   ; SubC Copyright 2012-2025 by Nils Holm
[00004]                   ; -------------------------------------------------------------------
<00000>                   #include include/ops_c.inc
<00001>                   ;------------------------------------------------------
<00002>                   ; ElfC Asm/02 Opcodes
<00003>                   ;------------------------------------------------------
<00004>                   
<00005>                   .op "PUSH","N","9$1 73 8$1 73"
<00006>                   .op "POP","N","60 72 A$1 F0 B$1"
<00007>                   .op "CALL","W","D4 H1 L1"
<00008>                   .op "RTN","","D5"
<00009>                   .op "CLC","","FC 00"
<00010>                   .op "STC","","FF 00"
<00011>                   .op "COPY","NR","8$1 A$2 9$1 B$2"
<00012>                   .op "LOAD","NW","F8 L2 A$1 F8 H2 B$1"
<00013>                   .op "MATCH","NW","8$1 FF L2 52 9$1 7F H2 F1"
<00014>                   .op "BRKPT","","79 D1"
<00015>                   .op "ADDR16","NR","8$2 52 8$1 F4 A$1 9$2 52 9$1 74 B$1"
<00016>                   .op "SUBR16","NR","8$2 52 8$1 F7 A$1 9$2 52 9$1 77 B$1"
<00017>                   .op "GOSUB","W","D9 L1"
<00018>                   .op "RSUB","","C0 21 00"
<00019>                   
<00020>                   ;------------------- end ops_c.inc --------------------
<00000>                   #include include/os_api.inc
<00001>                   ;--------------------------------------------------------------------
<00002>                   ; Elf/OS and Mini/DOS Kernel API
<00003>                   ;--------------------------------------------------------------------
<00004>                   
<00005> 0000:             O_OPEN:       equ    0306h             ; open a file
<00006> 0000:             O_READ:       equ    0309h             ; read from file
<00007> 0000:             O_WRITE:      equ    030ch             ; write to file
<00008> 0000:             O_SEEK:       equ    030fh             ; seek to file position
<00009> 0000:             O_CLOSE:      equ    0312h             ; close file
<00010> 0000:             O_DELETE:     equ    0318h             ; delete a file
<00011> 0000:             O_RENAME:     equ    031bh             ; rename a file
<00012> 0000:             O_TYPE:       equ    0330h             ; console character output
<00013> 0000:             O_MSG:        equ    0333h             ; console string output
<00014> 0000:             O_READKEY:    equ    0336h             ; console character input
<00015> 0000:             O_INPUT:      equ    0339h             ; console string input
<00016> 0000:             O_INMSG:      equ    034bh             ; console inline messae output
<00017> 0000:             O_GETDEV:     equ    034eh             ; get device information
<00018> 0000:             O_GETTOD:     equ    0351h             ; get time of day
<00019> 0000:             O_ALLOC:      equ    036ch             ; alloc memory block
<00020> 0000:             O_DEALLOC:    equ    036fh             ; dealloc memory block
<00021>                   
<00022>                   ;--------------------------------------------------------------------
<00023>                   ; Elf/OS and Mini/DOS Data Locations
<00024>                   ;--------------------------------------------------------------------
<00025>                   
<00026> 0000:             K_KEYBUF:     equ    0080h             ; input key buffer
<00027> 0000:             K_MONTH:      equ    0475h             ; date/time information
<00028>                   
<00029>                   ;-------------------------- end os_api.inc --------------------------
<00000>                   #include include/elfc.inc
<00001>                   ;----------------------------------
<00002>                   ; ElfC - crt0 subroutine vectors
<00003>                   ;----------------------------------
<00004>                   
<00005>                   #define SUBTBL   $2100
<00006> 0000:             s_return:  equ  SUBTBL
<00007>                   
<00008> 0000:             s_esmove:  equ  (SUBTBL + $03)
<00009> 0000:             s_stkchk:  equ  (SUBTBL + $06)
<00010> 0000:             s_dpop16:  equ  (SUBTBL + $09)
<00011> 0000:             s_dpush16: equ  (SUBTBL + $0C)
<00012> 0000:             s_dget16:  equ  (SUBTBL + $0F)
<00013> 0000:             s_epush16: equ  (SUBTBL + $12)
<00014> 0000:             s_vpop16:  equ  (SUBTBL + $15)
<00015> 0000:             s_vpush8:  equ  (SUBTBL + $18)
<00016> 0000:             s_vpush16: equ  (SUBTBL + $1B)
<00017> 0000:             s_vstor8:  equ  (SUBTBL + $1E)
<00018> 0000:             s_vstor16: equ  (SUBTBL + $21)
<00019> 0000:             s_vinc8:   equ  (SUBTBL + $24)
<00020> 0000:             s_vinc16:  equ  (SUBTBL + $27)
<00021> 0000:             s_vdec8:   equ  (SUBTBL + $2A)
<00022> 0000:             s_vdec16:  equ  (SUBTBL + $2D)
<00023> 0000:             s_vpinc16: equ  (SUBTBL + $30)
<00024> 0000:             s_vpdec16: equ  (SUBTBL + $33)
<00025> 0000:             s_linit16: equ  (SUBTBL + $36)
<00026> 0000:             s_lstor8:  equ  (SUBTBL + $39)
<00027> 0000:             s_lstor16: equ  (SUBTBL + $3C)
<00028> 0000:             s_lpush8:  equ  (SUBTBL + $3F)
<00029> 0000:             s_lpush16: equ  (SUBTBL + $42)
<00030> 0000:             s_lget16:  equ  (SUBTBL + $45)
<00031> 0000:             s_lset16:  equ  (SUBTBL + $48)
<00032> 0000:             s_linc8:   equ  (SUBTBL + $4B)
<00033> 0000:             s_linc16:  equ  (SUBTBL + $4E)
<00034> 0000:             s_ldec8:   equ  (SUBTBL + $51)
<00035> 0000:             s_ldec16:  equ  (SUBTBL + $54)
<00036> 0000:             s_lpinc16: equ  (SUBTBL + $57)
<00037> 0000:             s_lpdec16: equ  (SUBTBL + $5A)
<00038> 0000:             s_psave:   equ  (SUBTBL + $5D)
<00039> 0000:             s_pstor8:  equ  (SUBTBL + $60)
<00040> 0000:             s_pstor16: equ  (SUBTBL + $63)
<00041> 0000:             s_pinc8:   equ  (SUBTBL + $66)
<00042> 0000:             s_pinc16:  equ  (SUBTBL + $69)
<00043> 0000:             s_pdec8:   equ  (SUBTBL + $6C)
<00044> 0000:             s_pdec16:  equ  (SUBTBL + $6F)
<00045> 0000:             s_pincptr: equ  (SUBTBL + $72)
<00046> 0000:             s_pdecptr: equ  (SUBTBL + $75)
<00047> 0000:             s_laddr16: equ  (SUBTBL + $78)
<00048> 0000:             s_deref8:  equ  (SUBTBL + $7B)
<00049> 0000:             s_deref16: equ  (SUBTBL + $7E)
<00050> 0000:             s_swap16:  equ  (SUBTBL + $81)
<00051> 0000:             s_add16:   equ  (SUBTBL + $84)
<00052> 0000:             s_sub16:   equ  (SUBTBL + $87)
<00053> 0000:             s_neg16:   equ  (SUBTBL + $8A)
<00054> 0000:             s_mdsgn16: equ  (SUBTBL + $8D)
<00055> 0000:             s_mul16:   equ  (SUBTBL + $90)
<00056> 0000:             s_div16:   equ  (SUBTBL + $93)
<00057> 0000:             s_mod16:   equ  (SUBTBL + $96)
<00058> 0000:             s_bool16:  equ  (SUBTBL + $99)
<00059> 0000:             s_true16:  equ  (SUBTBL + $9C)
<00060> 0000:             s_false16: equ  (SUBTBL + $9F)
<00061> 0000:             s_and16:   equ  (SUBTBL + $A2)
<00062> 0000:             s_or16:    equ  (SUBTBL + $A5)
<00063> 0000:             s_xor16:   equ  (SUBTBL + $A8)
<00064> 0000:             s_not16:   equ  (SUBTBL + $AB)
<00065> 0000:             s_inv16:   equ  (SUBTBL + $AE)
<00066> 0000:             s_shl16:   equ  (SUBTBL + $B1)
<00067> 0000:             s_shr16:   equ  (SUBTBL + $B4)
<00068> 0000:             s_eq16:    equ  (SUBTBL + $B7)
<00069> 0000:             s_gt16:    equ  (SUBTBL + $BA)
<00070> 0000:             s_gte16:   equ  (SUBTBL + $BD)
<00071> 0000:             s_lt16:    equ  (SUBTBL + $C0)
<00072> 0000:             s_lte16:   equ  (SUBTBL + $C3)
<00073> 0000:             s_ne16:    equ  (SUBTBL + $C6)
<00074> 0000:             s_ugt16:   equ  (SUBTBL + $C9)
<00075> 0000:             s_uge16:   equ  (SUBTBL + $CC)
<00076> 0000:             s_ult16:   equ  (SUBTBL + $CF)
<00077> 0000:             s_ule16:   equ  (SUBTBL + $D2)
<00078> 0000:             s_scltos2: equ  (SUBTBL + $D5)
<00079> 0000:             s_scltos4: equ  (SUBTBL + $D8)
<00080> 0000:             s_sclsos2: equ  (SUBTBL + $DB)
<00081> 0000:             s_sclsos4: equ  (SUBTBL + $DE)
<00082> 0000:             s_unscl2:  equ  (SUBTBL + $E1)
<00083> 0000:             s_unscl4:  equ  (SUBTBL + $E4)
<00084>                   
<00085>                   ;----------------------------------
<00086>                   ; ElfC crt0 - error vectors
<00087>                   ;----------------------------------
<00088>                   
<00089> 0000:                       extrn   auto_err
<00090> 0000:                       extrn   stk_err
<00091>                   
<00092>                   ;---------- end elfc.inc ----------
[00008]                   
[00009] 0000:             	           proc hello
[00010]                   
<00000>                   #include include/stdlib.inc
<00001> 0000:                          extrn C_init
<00002> 0000:                          extrn C_fdinit
<00003> 0000:                          extrn C_fdtable
<00004> 0000:                          extrn C_fildes
<00005> 0000:                          extrn Cabort
<00006> 0000:                          extrn Cabs
<00007> 0000:                          extrn Catexit
<00008> 0000:                          extrn Cexit
<00009> 0000:                          extrn Cmalloc
<00010> 0000:                          extrn Ccalloc
<00011> 0000:                          extrn Crealloc
<00012> 0000:                          extrn Cfree
<00013> 0000:                          extrn Catoi
<00014> 0000:                          extrn Citoa
<00015> 0000:                          extrn Citox
<00016> 0000:                          extrn Citou
<00017> 0000:                          extrn Cdiv
<00018> 0000:                          extrn Cbsearch
<00019> 0000:                          extrn Cqsort
<00020> 0000:                          extrn Crand
<00021> 0000:                          extrn Csrand
<00022> 0000:                          extrn Ccreat
<00023> 0000:                          extrn Copen
<00024> 0000:                          extrn Cclose
<00025> 0000:                          extrn Cread
<00026> 0000:                          extrn Cwrite
<00027> 0000:                          extrn Clseek
<00028> 0000:                          extrn Cunlink
<00029> 0000:                          extrn Crename
<00030> 0000:                          extrn Cmin
<00031> 0000:                          extrn Cmax
[00012]                   
<00000>                   #include include/stdio.inc
<00001> 0000:                          extrn Cstdin
<00002> 0000:                          extrn Cstdout
<00003> 0000:                          extrn Cstderr
<00004> 0000:                          extrn Cputs
<00005> 0000:                          extrn Cputstr
<00006> 0000:                          extrn Cgets
<00007> 0000:                          extrn Cputch
<00008> 0000:                          extrn Cgetch
<00009> 0000:                          extrn Cputchar
<00010> 0000:                          extrn Cgetchar
<00011> 0000:                          extrn Cfdopen
<00012> 0000:                          extrn Cfclose
<00013> 0000:                          extrn Cfopen
<00014> 0000:                          extrn Cferror
<00015> 0000:                          extrn Cfeof
<00016> 0000:                          extrn Cclearerr
<00017> 0000:                          extrn Cfgetc
<00018> 0000:                          extrn Cfputc
<00019> 0000:                          extrn Cfgets
<00020> 0000:                          extrn Cfputs
<00021> 0000:                          extrn Cungetc
<00022> 0000:                          extrn Cfread
<00023> 0000:                          extrn Cfwrite
<00024> 0000:                          extrn Cfflush
<00025> 0000:                          extrn Cfprintf
<00026> 0000:                          extrn Ckprintf
<00027> 0000:                          extrn Cprintf
<00028> 0000:                          extrn Csprintf
<00029> 0000:                          extrn Cvfprintf
<00030> 0000:                          extrn Cvprintf
<00031> 0000:                          extrn Cvsprintf
<00032> 0000:                          extrn Cfscanf
<00033> 0000:                          extrn Cscanf
<00034> 0000:                          extrn Csscanf
<00035> 0000:                          extrn Cfgetpos
<00036> 0000:                          extrn Cfsetpos
<00037> 0000:                          extrn Cfseek
<00038> 0000:                          extrn Cftell
<00039> 0000:                          extrn Cperror
<00040> 0000:                          extrn Crewind
<00041> 0000:                          extrn Cremove
<00042> 0000:                          extrn Ctmpnam
<00043> 0000:                          extrn Ctmpfile
<00044> 0000:                          extrn Cfileno
[00014]                   	;----- cgpublic
[00015] 0000:             	              public Cmain
[00016]                   Cmain:
[00017]                     ;----- cgsetup
[00020]                   #endif
[00021]                   	;---- cgentry
[00022] 0000: e2          	          sex   r2   				 ; make sure X = SP
[00023] 0001: 9b 73 8b 73 	          push  rb				 		 ; save current BP (base pointer)
[00024] 0005: 87 ab 97 bb 	          copy  r7, rb			 	 ; set BP to current ES location
[00025]                   	;----- begin stmt ------
[00026]                   	;----- cgldlab
[00027] 0009: d9 12       	 				gosub s_epush16
[00028] 000b: 00 23       	 				  dw  L2
[00029]                   	;----- cgcall
[00030] 000d: d4 00 00    	          call  Cprintf
[00031]                   	;----- cgstack
[00032] 0010: d9 03       	          gosub s_esmove				 ; move pointer for Expression Stack
[00033] 0012: 00 02       	          dw  2  ;--- offset
[00034] 0014: c3 00 00    	          lbdf  auto_err			 ; exit immediately when stack is exhausted by auto variables
[00035]                   	;---- queue dpush
[00036]                   	;----- push + pop data not required, data remains unchanged in RA
[00037]                   	;----- end stmt ------
[00038]                   
[00039]                   L1:
[00040]                   	;----- cgexit
[00041] 0017: e2          	          sex   r2            ; make sure X = SP
[00042] 0018: d9 06       	          gosub s_stkchk      ; check for expression stack creep
[00043] 001a: c3 00 00    	          lbdf  stk_err			 ; exit immediately when stack creep error occurs
[00044] 001d: 60 72 ab f0 	          pop   rb				 		 ; restore BP (base pointer)
              bb 
[00045]                   
[00046] 0022: d5          	          rtn    			 	     ; return to caller
[00047]                   
[00048]                   ;----- string table
[00049]                   
[00050]                   L2:
[00051] 0023: 48 65 6c 6c   db 'Hello, World!', 10    ;----- cgdefs
              6f 2c 20 57 
              6f 72 6c 64 
              21 0a 
[00052] 0031: 00          	db	$00    ;----- cgdefb
[00053]                   	;---- cgpostlude
[00054] 0032:             	             endp
